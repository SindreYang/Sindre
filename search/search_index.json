{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"# Sindre-\u5e38\u7528\u51fd\u6570\u5e93    [![Conference](http://img.shields.io/badge/NeurIPS-2022-4b44ce.svg)](https://papers.nips.cc/book/advances-in-neural-information-processing-systems-31-2018) [![Conference](http://img.shields.io/badge/ICLR-2022-4b44ce.svg)](https://papers.nips.cc/book/advances-in-neural-information-processing-systems-31-2018) [![Conference](http://img.shields.io/badge/AnyConference-year-4b44ce.svg)](https://papers.nips.cc/book/advances-in-neural-information-processing-systems-31-2018) <p> &lt;&lt;  \u9879\u76eeAPI\u6587\u6863 &gt;&gt; \u4e0b\u8f7dReleases     \u00b7     \u62a5\u544aBug     \u00b7     \u63d0\u51fa\u65b0\u7279\u6027 </p>"},{"location":"#_1","title":"\u5feb\u901f\u5b89\u88c5","text":"<pre><code>pip install  sindre\n ```   \n\n\n### \u5f15\u6587\n\n</code></pre> <p>{  @title={sindre},   author={sindreyang},   year={2024} } ```   </p>"},{"location":"3d/","title":"\u4e09\u7ef4\u7b97\u6cd5","text":""},{"location":"3d/#api","title":"API","text":"<pre><code>@path   \uff1asindre_package -&gt; tools.py\n@IDE    \uff1aPyCharm\n@Author \uff1asindre\n@Email  \uff1ayx@mviai.com\n@Date   \uff1a2024/6/17 15:38\n@Version: V0.1\n@License: (C)Copyright 2021-2023 , UP3D\n@Reference: \n@History:\n- 2024/6/17 :\n\n(\u4e00)\u672c\u4ee3\u7801\u7684\u8d28\u91cf\u4fdd\u8bc1\u671f\uff08\u7b80\u79f0\u201c\u8d28\u4fdd\u671f\u201d\uff09\u4e3a\u4e0a\u7ebf\u5185 1\u4e2a\u6708\uff0c\u8d28\u4fdd\u671f\u5185\u4e59\u65b9\u5bf9\u6240\u4ee3\u7801\u5b9e\u884c\u5305\u4fee\u6539\u670d\u52a1\u3002\n(\u4e8c)\u672c\u4ee3\u7801\u63d0\u4f9b\u4e09\u5305\u670d\u52a1\uff08\u5305\u9605\u8bfb\u3001\u5305\u7f16\u8bd1\u3001\u5305\u8fd0\u884c\uff09\u4e0d\u5305\u719f\n(\u4e09)\u672c\u4ee3\u7801\u6240\u6709\u89e3\u91ca\u6743\u5f52\u6743\u5f52\u795e\u517d\u6240\u6709\uff0c\u7981\u6b62\u672a\u5f00\u5149\u76f2\u76ee\u4e0a\u7ebf\n(\u56db)\u8bf7\u4e25\u683c\u6309\u7167\u4fdd\u517b\u624b\u518c\u5bf9\u4ee3\u7801\u8fdb\u884c\u4fdd\u517b\uff0c\u672c\u4ee3\u7801\u7279\u70b9\uff1a\n      i. \u8fd0\u884c\u5728\u98ce\u7535\u3001\u6c34\u7535\u7684\u673a\u5668\u4e0a\n     ii. \u673a\u5668\u673a\u5934\u671d\u4e1c\uff0c\u6bd4\u8f83\u559c\u6b22\u592a\u9633\u7684\u7167\u5c04\n    iii. \u96c6\u6210\u6b64\u4ee3\u7801\u7684\u4eba\u5458\uff0c\u5e94\u62d2\u7edd\u9ec4\u8d4c\u6bd2\uff0c\u5bb9\u6613\u8bf1\u53d1\u672c\u4ee3\u7801\u6027\u80fd\u8d8a\u6765\u8d8a\u5f31\n\u58f0\u660e\uff1a\u672a\u5c65\u884c\u5c06\u89c6\u4e3a\u81ea\u4e3b\u653e\u5f03\u8d28\u4fdd\u671f\uff0c\u672c\u4eba\u4e0d\u627f\u62c5\u5bf9\u6b64\u4ea7\u751f\u7684\u4e00\u5207\u6cd5\u5f8b\u540e\u679c\n\u5982\u6709\u95ee\u9898\uff0c\u70ed\u7ebf: 114\n\n</code></pre> <p>\u4e13\u6ce8\u4e8e\u7259\u988cmesh\u7684\u7279\u6b8a\u5b9e\u73b0</p>"},{"location":"3d/#utils3d.algorithm.A_Star","title":"<code>A_Star</code>","text":""},{"location":"3d/#utils3d.algorithm.A_Star.__init__","title":"<code>__init__(vertices, faces)</code>","text":"<p>\u4f7f\u7528A*\u7b97\u6cd5\u5728\u4e09\u7ef4\u4e09\u89d2\u7f51\u683c\u4e2d\u5bfb\u627e\u6700\u77ed\u8def\u5f84</p> <p>\u53c2\u6570\uff1a vertices: numpy\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N,3)\uff0c\u8868\u793a\u9876\u70b9\u5750\u6807 faces: numpy\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(M,3)\uff0c\u8868\u793a\u4e09\u89d2\u5f62\u9762\u7684\u9876\u70b9\u7d22\u5f15</p>"},{"location":"3d/#utils3d.algorithm.A_Star.build_adjacency","title":"<code>build_adjacency(faces)</code>","text":"<p>\u6784\u5efa\u9876\u70b9\u7684\u90bb\u63a5\u8868</p>"},{"location":"3d/#utils3d.algorithm.A_Star.run","title":"<code>run(start_idx, end_idx, vertex_weights=None)</code>","text":"<p>\u4f7f\u7528A*\u7b97\u6cd5\u5728\u4e09\u7ef4\u4e09\u89d2\u7f51\u683c\u4e2d\u5bfb\u627e\u6700\u77ed\u8def\u5f84</p> <p>\u53c2\u6570\uff1a start_idx: \u8d77\u59cb\u9876\u70b9\u7684\u7d22\u5f15 end_idx: \u76ee\u6807\u9876\u70b9\u7684\u7d22\u5f15 vertex_weights: \u53ef\u9009\uff0c\u5f62\u72b6\u4e3a(N,)\uff0c\u9876\u70b9\u6743\u91cd\u6570\u7ec4\uff0c\u9ed8\u8ba4\u4e3aNone</p> <p>\u8fd4\u56de\uff1a path: \u5217\u8868\uff0c\u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u9876\u70b9\u7d22\u5f15\u8def\u5f84\uff0c\u82e5\u4e0d\u53ef\u8fbe\u8fd4\u56deNone</p>"},{"location":"3d/#utils3d.algorithm.BestKFinder","title":"<code>BestKFinder</code>","text":""},{"location":"3d/#utils3d.algorithm.BestKFinder.__init__","title":"<code>__init__(points, labels)</code>","text":"<p>\u521d\u59cb\u5316\u7c7b\uff0c\u63a5\u6536\u70b9\u4e91\u7f51\u683c\u6570\u636e\u548c\u5bf9\u5e94\u7684\u6807\u7b7e</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>ndarray</code> <p>\u70b9\u4e91\u6570\u636e\uff0c\u5f62\u72b6\u4e3a (N, 3)</p> required <code>labels</code> <code>ndarray</code> <p>\u70b9\u4e91\u6807\u7b7e\uff0c\u5f62\u72b6\u4e3a (N,)</p> required"},{"location":"3d/#utils3d.algorithm.BestKFinder.calculate_boundary_points","title":"<code>calculate_boundary_points(k)</code>","text":"<p>\u8ba1\u7b97\u8fb9\u754c\u70b9 :param k: \u6700\u8fd1\u90bb\u70b9\u7684\u6570\u91cf :return: \u8fb9\u754c\u70b9\u7684\u6807\u7b7e\u6570\u7ec4</p>"},{"location":"3d/#utils3d.algorithm.BestKFinder.evaluate_boundary_points","title":"<code>evaluate_boundary_points(bd_labels)</code>","text":"<p>\u8bc4\u4f30\u8fb9\u754c\u70b9\u7684\u5206\u5e03\u5408\u7406\u6027 \u8fd9\u91cc\u7b80\u5355\u4f7f\u7528\u8fb9\u754c\u70b9\u7684\u6570\u91cf\u5360\u6bd4\u4f5c\u4e3a\u8bc4\u4f30\u6307\u6807 :param bd_labels: \u8fb9\u754c\u70b9\u7684\u6807\u7b7e\u6570\u7ec4 :return: \u8bc4\u4f30\u5f97\u5206</p>"},{"location":"3d/#utils3d.algorithm.BestKFinder.find_best_k","title":"<code>find_best_k(k_values)</code>","text":"<p>\u627e\u51fa\u6700\u4f73\u7684\u6700\u8fd1\u90bb\u70b9\u5927\u5c0f</p> <p>:param k_values: \u5f85\u6d4b\u8bd5\u7684\u6700\u8fd1\u90bb\u70b9\u5927\u5c0f\u5217\u8868 :return: \u6700\u4f73\u7684\u6700\u8fd1\u90bb\u70b9\u5927\u5c0f</p>"},{"location":"3d/#utils3d.algorithm.GraphCutRefiner","title":"<code>GraphCutRefiner</code>","text":""},{"location":"3d/#utils3d.algorithm.GraphCutRefiner.__init__","title":"<code>__init__(vertices, faces, vertex_labels, smooth_factor=None, temperature=None, keep_label=True)</code>","text":"<p>\u57fa\u4e8e\u9876\u70b9\u7684\u56fe\u5207\u4f18\u5316\u5668</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>array - like</code> <p>\u9876\u70b9\u5750\u6807\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n_vertices, 3)\u3002</p> required <code>faces</code> <code>array - like</code> <p>\u9762\u7247\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n_faces, 3)\u3002</p> required <code>vertex_labels</code> <code>array - like</code> <p>\u9876\u70b9\u521d\u59cb\u6807\u7b7e\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n_vertices,)\u3002</p> required <code>smooth_factor</code> <code>float</code> <p>\u5e73\u6ed1\u5f3a\u5ea6\u7cfb\u6570\uff0c\u8d8a\u5927\u8fb9\u754c\u8d8a\u5e73\u6ed1\u3002\u9ed8\u8ba4\u503c\u4e3a None\uff0c\u6b64\u65f6\u4f1a\u81ea\u52a8\u8ba1\u7b97\u3002\u8303\u56f4\u901a\u5e38\u5728 0.1 \u5230 0.6 \u4e4b\u95f4\u3002</p> <code>None</code> <code>temperature</code> <code>float</code> <p>\u6e29\u5ea6\u53c2\u6570\uff0c\u8d8a\u5927\u6807\u7b7e\u8d8a\u5e73\u6ed1\uff0c\u5904\u7406\u901f\u5ea6\u8d8a\u5feb\u3002\u9ed8\u8ba4\u503c\u4e3a None\uff0c\u6b64\u65f6\u4f1a\u81ea\u52a8\u8ba1\u7b97\u3002\u5178\u578b\u503c\u8303\u56f4\u5728 50 \u5230 500 \u4e4b\u95f4\uff0c\u4f1a\u968f\u7f51\u683c\u590d\u6742\u5ea6\u81ea\u52a8\u8c03\u6574\u3002</p> <code>None</code> <code>keep_label</code> <code>bool</code> <p>\u662f\u5426\u4fdd\u6301\u4f18\u5316\u524d\u540e\u6807\u7b7e\u7c7b\u522b\u4e00\u81f4\u6027\uff0c\u9ed8\u8ba4\u503c\u4e3a True\u3002</p> <code>True</code>"},{"location":"3d/#utils3d.algorithm.GraphCutRefiner.refine_labels","title":"<code>refine_labels()</code>","text":"<p>\u6267\u884c\u6807\u7b7e\u4f18\u5316 :return: \u4f18\u5316\u540e\u7684\u9876\u70b9\u6807\u7b7e\u6570\u7ec4 (n_vertices,)</p>"},{"location":"3d/#utils3d.algorithm.MeshRandomWalks","title":"<code>MeshRandomWalks</code>","text":""},{"location":"3d/#utils3d.algorithm.MeshRandomWalks.__init__","title":"<code>__init__(vertices, faces, face_normals=None)</code>","text":"<p>\u968f\u673a\u6e38\u8d70\u5206\u5272\u7f51\u683c</p> <p>\u53c2\u8003\uff1ahttps://www.cnblogs.com/shushen/p/5144823.html</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <p>\u9876\u70b9\u5750\u6807\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N, 3)</p> required <code>faces</code> <p>\u9762\u7247\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(M, 3)</p> required <code>face_normals</code> <p>\u53ef\u9009\u7684\u9762\u6cd5\u7ebf\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(M, 3)</p> <code>None</code> <p>Note:</p> <pre><code>```python\n\n    # \u52a0\u8f7d\u5e76\u9884\u5904\u7406\u7f51\u683c\n    mesh = vedo.load(r\"upper_jaws.ply\")\n    mesh.compute_normals()\n\n    # \u521b\u5efa\u5206\u5272\u5668\u5b9e\u4f8b\n    segmenter = MeshRandomWalks(\n        vertices=mesh.points,\n        faces=mesh.faces(),\n        face_normals=mesh.celldata[\"Normals\"]\n    )\n\n    head = [1063,3571,1501,8143]\n    tail = [7293,3940,8021]\n\n    # \u6267\u884c\u5206\u5272\n    labels, unmarked = segmenter.segment(\n        foreground_seeds=head,\n        background_seeds=tail\n    )\n    p1 = vedo.Points(mesh.points[head],r=20,c=\"red\")\n    p2 = vedo.Points(mesh.points[tail],r=20,c=\"blue\")\n    # \u53ef\u89c6\u5316\u7ed3\u679c\n    mesh.pointdata[\"labels\"] = labels\n    mesh.cmap(\"jet\", \"labels\")\n    vedo.show([mesh,p1,p2], axes=1, viewup='z').close()\n```\n</code></pre>"},{"location":"3d/#utils3d.algorithm.MeshRandomWalks.segment","title":"<code>segment(foreground_seeds, background_seeds, vertex_weights=None)</code>","text":"<p>\u6267\u884c\u7f51\u683c\u5206\u5272</p> \u53c2\u6570 <p>foreground_seeds: \u524d\u666f\u79cd\u5b50\u70b9\u7d22\u5f15\u5217\u8868 background_seeds: \u80cc\u666f\u79cd\u5b50\u70b9\u7d22\u5f15\u5217\u8868 vertex_weights: \u53ef\u9009\u7684\u9876\u70b9\u6743\u91cd\u77e9\u9635\uff08\u7a00\u758f\u77e9\u9635\uff09</p> \u8fd4\u56de <p>labels: \u9876\u70b9\u6807\u7b7e\u6570\u7ec4 (0: \u80cc\u666f\uff0c1: \u524d\u666f) unmarked: \u672a\u6807\u8bb0\u9876\u70b9\u7684\u5e03\u5c14\u63a9\u7801</p>"},{"location":"3d/#utils3d.algorithm.NpEncoder","title":"<code>NpEncoder</code>","text":"<p>               Bases: <code>JSONEncoder</code></p> Notes <p>\u5c06numpy\u7c7b\u578b\u7f16\u7801\u6210json\u683c\u5f0f</p>"},{"location":"3d/#utils3d.algorithm.add_base","title":"<code>add_base(vd_mesh, value_z=-20, close_base=True, return_strips=False)</code>","text":"<p>\u7ed9\u7f51\u683c\u8fb9\u754cz\u65b9\u5411\u6dfb\u52a0\u5e95\u5ea7</p> <p>Parameters:</p> Name Type Description Default <code>vd_mesh</code> <code>_type_</code> <p>vedo.mesh</p> required <code>value_z</code> <code>int</code> <p>\u5e95\u5ea7\u957f\u5ea6. Defaults to -20.</p> <code>-20</code> <code>close_base</code> <code>bool</code> <p>\u5e95\u5ea7\u662f\u5426\u95ed\u5408. Defaults to True.</p> <code>True</code> <code>return_strips</code> <code>bool</code> <p>\u662f\u5426\u8fd4\u56de\u6dfb\u52a0\u7684\u7f51\u683c. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>\u6dfb\u52a0\u5e95\u5ea7\u7684\u7f51\u683c</p>"},{"location":"3d/#utils3d.algorithm.apply_transform","title":"<code>apply_transform(vertices, transform)</code>","text":"<pre><code>\u5bf94*4\u77e9\u9635\u8fdb\u884c\u5e94\u7528\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>array</code> <p>\u9876\u70b9</p> required <code>transform</code> <code>array</code> <p>4*4 \u77e9\u9635</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u53d8\u6362\u540e\u7684\u9876\u70b9</p>"},{"location":"3d/#utils3d.algorithm.array2voxel","title":"<code>array2voxel(voxel_array)</code>","text":"<pre><code>\u5c06\u56fa\u5b9a\u5927\u5c0f\u7684\u4e09\u7ef4\u6570\u7ec4\u8f6c\u6362\u4e3a voxel_grid_index \u6570\u7ec4\u3002\n\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5f62\u72b6\u4e3a (voxel_size, voxel_size, voxel_size) \u7684\u4e09\u7ef4\u6570\u7ec4\uff0c\n\u627e\u51fa\u5176\u4e2d\u503c\u4e3a 1 \u7684\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u5c06\u8fd9\u4e9b\u7d22\u5f15\u7ec4\u5408\u6210\u4e00\u4e2a\u5f62\u72b6\u4e3a (N, 3) \u7684\u6570\u7ec4\uff0c\n\u7c7b\u4f3c\u4e8e\u4ece open3d \u7684 o3d.voxel_grid.get_voxels () \u65b9\u6cd5\u83b7\u53d6\u7684\u7ed3\u679c\u3002\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>voxel_array</code> <code>ndarray</code> <p>\u5f62\u72b6\u4e3a (voxel_size, voxel_size, voxel_size) \u7684\u4e09\u7ef4\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u503c\u4e3a 1 \u7684\u4f4d\u7f6e\u4ee3\u8868\u5bf9\u5e94\u7684\u4f53\u7d20\u7f51\u683c\u7d22\u5f15\u3002</p> required <p>Returns:</p> <pre><code>numpy.ndarray: \u5f62\u72b6\u4e3a (N, 3) \u7684\u6570\u7ec4\uff0c\u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6bcf\u4e2a\u4f53\u7d20\u7684\u7f51\u683c\u7d22\u5f15\uff0c\u7c7b\u4f3c\u4e8e\u4ece o3d.voxel_grid.get_voxels () \u65b9\u6cd5\u83b7\u53d6\u7684\u7ed3\u679c\u3002\n</code></pre> <p>Example:</p> <pre><code>```python\n\n# \u83b7\u53d6 grid_index_array\nvoxel_list = voxel_grid.get_voxels()\ngrid_index_array = list(map(lambda x: x.grid_index, voxel_list))\ngrid_index_array = np.array(grid_index_array)\nvoxel_grid_array = voxel2array(grid_index_array, voxel_size=32)\ngrid_index_array = array2voxel(voxel_grid_array)\npointcloud_array = grid_index_array  # 0.03125 \u662f\u4f53\u7d20\u5927\u5c0f\npc = o3d.geometry.PointCloud()\npc.points = o3d.utility.Vector3dVector(pointcloud_array)\no3d_voxel = o3d.geometry.VoxelGrid.create_from_point_cloud(pc, voxel_size=0.05)\no3d.visualization.draw_geometries([pcd, cc, o3d_voxel])\n\n\n```\n</code></pre>"},{"location":"3d/#utils3d.algorithm.collision_depth","title":"<code>collision_depth(mesh1, mesh2)</code>","text":"<p>\u8ba1\u7b97\u4e24\u4e2a\u7f51\u683c\u95f4\u7684\u78b0\u649e\u6df1\u5ea6\u6216\u6700\u5c0f\u95f4\u9694\u8ddd\u79bb\u3002</p> <p>\u4f7f\u7528VTK\u7684\u5e26\u7b26\u53f7\u8ddd\u79bb\u7b97\u6cd5\u68c0\u6d4b\u78b0\u649e\u72b6\u6001\uff1a - \u6b63\u503c\uff1a\u4e24\u7f51\u683c\u5206\u79bb\uff0c\u8fd4\u56de\u503c\u4e3a\u6700\u8fd1\u8ddd\u79bb - \u96f6\u503c\uff1a\u8868\u9762\u6070\u597d\u63a5\u89e6 - \u8d1f\u503c\uff1a\u53d1\u751f\u7a7f\u900f\uff0c\u8fd4\u56de\u503c\u4e3a\u6700\u5927\u7a7f\u900f\u6df1\u5ea6\uff08\u7edd\u5bf9\u503c\uff09</p> <p>Parameters:</p> Name Type Description Default <code>mesh1</code> <code>Mesh</code> <p>\u7b2c\u4e00\u4e2a\u7f51\u683c\u5bf9\u8c61\uff0c\u9700\u5305\u542b\u9876\u70b9\u6570\u636e</p> required <code>mesh2</code> <code>Mesh</code> <p>\u7b2c\u4e8c\u4e2a\u7f51\u683c\u5bf9\u8c61\uff0c\u9700\u5305\u542b\u9876\u70b9\u6570\u636e</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>\u5e26\u7b26\u53f7\u7684\u8ddd\u79bb\u503c\uff0c\u7b26\u53f7\u8868\u793a\u78b0\u649e\u72b6\u6001\uff0c\u7edd\u5bf9\u503c\u8868\u793a\u8ddd\u79bb\u91cf\u7ea7</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>\u5f53VTK\u8ba1\u7b97\u7ba1\u9053\u51fa\u73b0\u9519\u8bef\u65f6\u629b\u51fa</p> Notes <ol> <li>\u5f53\u8f93\u5165\u7f51\u683c\u9876\u70b9\u6570&gt;1000\u65f6\u4f1a\u4ea7\u751f\u6027\u80fd\u8b66\u544a</li> <li>\u8fd4\u56defloat('inf')\u8868\u793a\u8ba1\u7b97\u5f02\u5e38\u6216\u65e0\u9650\u8fdc\u8ddd\u79bb</li> </ol>"},{"location":"3d/#utils3d.algorithm.compute_curvature_by_igl","title":"<code>compute_curvature_by_igl(v, f, max_curvature=True)</code>","text":"<p>\u7528igl\u8ba1\u7b97\u5e73\u5747\u66f2\u7387\u5e76\u5f52\u4e00\u5316</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <p>\u9876\u70b9;</p> required <code>f</code> <p>\u9762\u7247:</p> required <code>max_curvature</code> <p>\u8fd4\u56de\u6700\u5927\u66f2\u7387</p> <code>True</code> <p>Returns:</p> Type Description <ul> <li>vertex_curvature (numpy.ndarray): \u9876\u70b9\u66f2\u7387\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n,)\uff0c\u5176\u4e2d n \u662f\u9876\u70b9\u7684\u6570\u91cf\u3002 \u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u5bf9\u5e94\u9876\u70b9\u7684\u66f2\u7387\u3002</li> </ul> Note <p>pd1 : #v by 3 maximal curvature direction for each vertex pd2 : #v by 3 minimal curvature direction for each vertex pv1 : #v by 1 maximal curvature value for each vertex pv2 : #v by 1 minimal curvature value for each vertex</p>"},{"location":"3d/#utils3d.algorithm.compute_curvature_by_meshlab","title":"<code>compute_curvature_by_meshlab(ms)</code>","text":"<p>\u4f7f\u7528 MeshLab \u8ba1\u7b97\u7f51\u683c\u7684\u66f2\u7387\u548c\u9876\u70b9\u989c\u8272\u3002</p> <p>\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u9876\u70b9\u77e9\u9635\u548c\u4e00\u4e2a\u9762\u77e9\u9635\u4f5c\u4e3a\u8f93\u5165\uff0c\u521b\u5efa\u4e00\u4e2a MeshLab \u7684 MeshSet \u5bf9\u8c61\uff0c \u5e76\u5c06\u8f93\u5165\u7684\u9876\u70b9\u548c\u9762\u6dfb\u52a0\u5230 MeshSet \u4e2d\u3002\u7136\u540e\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u9876\u70b9\u7684\u4e3b\u66f2\u7387\u65b9\u5411\uff0c \u6700\u540e\u83b7\u53d6\u9876\u70b9\u989c\u8272\u77e9\u9635\u548c\u9876\u70b9\u66f2\u7387\u6570\u7ec4\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ms</code> <p>pymeshlab\u683c\u5f0fmesh;</p> required <p>Returns:</p> Type Description <ul> <li>vertex_colors (numpy.ndarray): \u9876\u70b9\u989c\u8272\u77e9\u9635\uff0c\u5f62\u72b6\u4e3a (n, 3)\uff0c\u5176\u4e2d n \u662f\u9876\u70b9\u7684\u6570\u91cf\u3002 \u6bcf\u4e2a\u5143\u7d20\u7684\u8303\u56f4\u662f [0, 255]\uff0c\u8868\u793a\u9876\u70b9\u7684\u989c\u8272\u3002</li> </ul> <ul> <li>vertex_curvature (numpy.ndarray): \u9876\u70b9\u66f2\u7387\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n,)\uff0c\u5176\u4e2d n \u662f\u9876\u70b9\u7684\u6570\u91cf\u3002 \u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u5bf9\u5e94\u9876\u70b9\u7684\u66f2\u7387\u3002</li> </ul> <ul> <li>new_vertex (numpy.ndarray): \u65b0\u7684\u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (n,)\uff0c\u5176\u4e2d n \u662f\u9876\u70b9\u7684\u6570\u91cf\u3002</li> </ul>"},{"location":"3d/#utils3d.algorithm.compute_face_normals","title":"<code>compute_face_normals(vertices, faces)</code>","text":"<p>\u8ba1\u7b97\u4e09\u89d2\u5f62\u7f51\u683c\u4e2d\u6bcf\u4e2a\u9762\u7684\u6cd5\u7ebf Args:     vertices: \u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (N, 3)     faces: \u9762\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (M, 3)\uff0c\u6bcf\u4e2a\u9762\u7531\u4e09\u4e2a\u9876\u70b9\u7d22\u5f15\u7ec4\u6210 Returns:     \u9762\u6cd5\u7ebf\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (M, 3)</p>"},{"location":"3d/#utils3d.algorithm.compute_vertex_normals","title":"<code>compute_vertex_normals(vertices, faces)</code>","text":"<p>\u8ba1\u7b97\u4e09\u89d2\u5f62\u7f51\u683c\u4e2d\u6bcf\u4e2a\u9876\u70b9\u7684\u6cd5\u7ebf Args:     vertices: \u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (N, 3)     faces: \u9762\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (M, 3)\uff0c\u6bcf\u4e2a\u9762\u7531\u4e09\u4e2a\u9876\u70b9\u7d22\u5f15\u7ec4\u6210 Returns:     \u9876\u70b9\u6cd5\u7ebf\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (N, 3)</p>"},{"location":"3d/#utils3d.algorithm.create_voxels","title":"<code>create_voxels(vertices, resolution=256)</code>","text":"<pre><code>\u901a\u8fc7\u9876\u70b9\u521b\u5efa\u9635\u5217\u65b9\u683c\u4f53\u7d20\n</code></pre> <p>Args:     vertices: \u9876\u70b9     resolution:  \u5206\u8fa8\u7387</p> <p>Returns:</p> Type Description <p>\u8fd4\u56de res**3 \u7684\u9876\u70b9 , mc\u91cd\u5efa\u9700\u8981\u7684\u7f29\u653e\u53ca\u4f4d\u79fb</p> Notes <p>v, f = mcubes.marching_cubes(data.reshape(256, 256, 256), 0)</p> <p>m=vedo.Mesh([v*scale+translation, f])</p>"},{"location":"3d/#utils3d.algorithm.cut_mesh_point_loop","title":"<code>cut_mesh_point_loop(mesh, pts, invert=False)</code>","text":"<p>\u57fa\u4e8evtk+dijkstra\u5b9e\u73b0\u7684\u57fa\u4e8e\u7ebf\u7684\u5206\u5272;</p> <p>\u7ebf\u652f\u6301\u5728\u7f51\u683c\u4e0a\u6216\u8005\u7f51\u683c\u5916\uff1b</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>_type_</code> <p>\u5f85\u5207\u5272\u7f51\u683c</p> required <code>pts</code> <code>Points</code> <p>\u5207\u5272\u7ebf</p> required <code>invert</code> <code>bool</code> <p>\u9009\u62e9\u4fdd\u7559\u5916\u90e8. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>\u5207\u5272\u540e\u7684\u7f51\u683c</p>"},{"location":"3d/#utils3d.algorithm.equidistant_mesh","title":"<code>equidistant_mesh(mesh, d=-0.01, merge=True)</code>","text":"<p>\u6b64\u51fd\u6570\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u4e0e\u8f93\u5165\u7f51\u683c\u7b49\u8ddd\u7684\u65b0\u7f51\u683c\uff0c\u53ef\u9009\u62e9\u5c06\u65b0\u7f51\u683c\u4e0e\u539f\u7f51\u683c\u5408\u5e76\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>Mesh</code> <p>\u8f93\u5165\u7684\u4e09\u7ef4\u7f51\u683c\u5bf9\u8c61\u3002</p> required <code>d</code> <code>(float, \u53ef\u9009)</code> <p>\u9876\u70b9\u504f\u79fb\u7684\u8ddd\u79bb\uff0c\u9ed8\u8ba4\u4e3a -0.01\u3002\u8d1f\u503c\u8868\u793a\u5411\u5185\u504f\u79fb\uff0c\u6b63\u503c\u8868\u793a\u5411\u5916\u504f\u79fb\u3002</p> <code>-0.01</code> <code>merge</code> <code>(bool, \u53ef\u9009)</code> <p>\u662f\u5426\u5c06\u539f\u7f51\u683c\u548c\u504f\u79fb\u540e\u7684\u7f51\u683c\u5408\u5e76\uff0c\u9ed8\u8ba4\u4e3a True\u3002</p> <code>True</code> <p>Returns:</p> Type Description <p>vedo.Mesh \u6216 vedo.Assembly: \u5982\u679c merge \u4e3a True\uff0c\u5219\u8fd4\u56de\u5408\u5e76\u540e\u7684\u7f51\u683c\uff1b\u5426\u5219\u8fd4\u56de\u504f\u79fb\u540e\u7684\u7f51\u683c\u3002</p>"},{"location":"3d/#utils3d.algorithm.face_labels_to_vertex_labels","title":"<code>face_labels_to_vertex_labels(vertices, faces, face_labels)</code>","text":"<pre><code>\u5c06\u4e09\u89d2\u7f51\u683c\u7684\u9762\u7247\u6807\u7b7e\u8f6c\u6362\u6210\u9876\u70b9\u6807\u7b7e\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>Union[array, list]</code> <p>\u7259\u988c\u4e09\u89d2\u7f51\u683c</p> required <code>faces</code> <code>Union[array, list]</code> <p>\u9762\u7247\u6807\u7b7e</p> required <code>face_labels</code> <code>array</code> <p>\u9876\u70b9\u6807\u7b7e</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u9876\u70b9\u5c5e\u6027</p>"},{"location":"3d/#utils3d.algorithm.farthest_point_sampling","title":"<code>farthest_point_sampling(vertices, n_sample=2000, auto_seg=True, n_batches=10)</code>","text":"<p>\u6700\u8fdc\u70b9\u91c7\u6837\uff0c\u652f\u6301\u81ea\u52a8\u5206\u6279\u5904\u7406</p> <p>\u6839\u636e\u53c2\u6570\u914d\u7f6e\uff0c\u81ea\u52a8\u51b3\u5b9a\u662f\u5426\u5c06\u8f93\u5165\u70b9\u4e91\u5206\u5272\u4e3a\u591a\u4e2a\u6279\u6b21\u8fdb\u884c\u5904\u7406\u3002\u5f53\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u65f6\uff0c \u5efa\u8bae\u542f\u7528auto_seg\u4ee5\u964d\u4f4e\u5185\u5b58\u9700\u6c42\u5e76\u5229\u7528\u5e76\u884c\u52a0\u901f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>ndarray</code> <p>\u8f93\u5165\u70b9\u4e91\u5750\u6807\uff0c\u5f62\u72b6\u4e3a(N, 3)\u7684\u6d6e\u70b9\u6570\u7ec4</p> required <code>n_sample</code> <code>int</code> <p>\u603b\u91c7\u6837\u70b9\u6570\uff0c\u5f53auto_seg=False\u65f6\u751f\u6548\u3002\u9ed8\u8ba42000</p> <code>2000</code> <code>auto_seg</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u81ea\u52a8\u5206\u6279\u5904\u7406(\u63d0\u901f\uff0c\u4f46\u4f1a\u4e22\u5931\u5168\u5c40\u8ddd\u79bb\u4fe1\u606f)\u3002\u9ed8\u8ba4False</p> <code>True</code> <code>n_batches</code> <code>int</code> <p>\u81ea\u52a8\u5206\u6279\u65f6\u7684\u6279\u6b21\u6570\u91cf\u3002\u9ed8\u8ba410</p> <code>10</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: \u91c7\u6837\u70b9\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(n_sample,)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u8f93\u5165\u6570\u7ec4\u7ef4\u5ea6\u4e0d\u6b63\u786e\u65f6\u629b\u51fa</p> Notes <p>\u5178\u578b\u573a\u666f: - \u5c0f\u89c4\u6a21\u6570\u636e\uff08\u59825\u4e07\u70b9\u4ee5\u4e0b\uff09: auto_seg=False\uff0c\u5355\u6279\u6b21\u5904\u7406 - \u5927\u89c4\u6a21\u6570\u636e\uff08\u5982\u767e\u4e07\u7ea7\u70b9\uff09: auto_seg=True\uff0c\u520610\u6279\u5904\u7406\uff0c\u6bcf\u6279\u91c7\u68372000\u70b9</p> <p>\u793a\u4f8b:</p> <p>vertices = np.random.rand(100000, 3).astype(np.float32)</p>"},{"location":"3d/#utils3d.algorithm.farthest_point_sampling--102000","title":"\u81ea\u52a8\u520610\u6279\uff0c\u6bcf\u6279\u91c72000\u70b9","text":"<p>indices = farthest_point_sampling(vertices, auto_seg=True)</p>"},{"location":"3d/#utils3d.algorithm.farthest_point_sampling--5000","title":"\u5355\u6279\u91c75000\u70b9","text":"<p>indices = farthest_point_sampling(vertices, n_sample=5000)</p>"},{"location":"3d/#utils3d.algorithm.farthest_point_sampling_by_open3d","title":"<code>farthest_point_sampling_by_open3d(vertices, n_sample=2000)</code>","text":"<p>\u8f93\u51fa\u91c7\u6837\u540e\u7684\u70b9</p>"},{"location":"3d/#utils3d.algorithm.fill_hole_with_center","title":"<code>fill_hole_with_center(mesh, boundaries, return_vf=False)</code>","text":"<pre><code>\u7528\u4e2d\u5fc3\u70b9\u65b9\u5f0f\u5f3a\u5236\u8865\u6d1e\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>_type_</code> <p>vedo.Mesh</p> required <code>boundaries</code> <p>vedo.boundaries</p> required <code>return_vf</code> <p>\u662f\u5426\u8fd4\u56de\u8865\u6d1e\u7684mesh</p> <code>False</code>"},{"location":"3d/#utils3d.algorithm.fix_floater_by_meshlab","title":"<code>fix_floater_by_meshlab(vertices, faces, nbfaceratio=0.1, nonclosedonly=False)</code>","text":"<p>\u79fb\u9664\u7f51\u683c\u4e2d\u7684\u6d6e\u52a8\u5c0f\u7ec4\u4ef6\uff08\u5c0f\u9762\u79ef\u4e0d\u8fde\u901a\u90e8\u5206\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>MeshSet</code> <p>\u8f93\u5165\u7684\u7f51\u683c\u6a21\u578b\u3002</p> required <code>nbfaceratio</code> <code>float</code> <p>\u9762\u79ef\u6bd4\u7387\u9608\u503c\uff0c\u5c0f\u4e8e\u8be5\u6bd4\u7387\u7684\u90e8\u5206\u5c06\u88ab\u79fb\u9664\u3002</p> <code>0.1</code> <code>nonclosedonly</code> <code>bool</code> <p>\u662f\u5426\u4ec5\u79fb\u9664\u975e\u5c01\u95ed\u90e8\u5206\u3002</p> <code>False</code> <p>Returns:</p> Type Description <code>Mesh</code> <p>pymeshlab.MeshSet: \u79fb\u9664\u6d6e\u52a8\u5c0f\u7ec4\u4ef6\u540e\u7684\u7f51\u683c\u6a21\u578b\u3002</p>"},{"location":"3d/#utils3d.algorithm.fix_invalid_by_meshlab","title":"<code>fix_invalid_by_meshlab(ms)</code>","text":"<p>\u6e05\u7406\u65e0\u6548\u7684\u51e0\u4f55\u7ed3\u6784\uff0c\u5982\u6298\u53e0\u9762\u3001\u96f6\u9762\u79ef\u9762\u548c\u672a\u5f15\u7528\u7684\u9876\u70b9\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ms</code> <p>pymeshlab.MeshSet \u5bf9\u8c61</p> required <p>Returns:</p> Type Description <p>pymeshlab.MeshSet \u5bf9\u8c61</p>"},{"location":"3d/#utils3d.algorithm.fix_low_qualitys_by_meshlab","title":"<code>fix_low_qualitys_by_meshlab(ms)</code>","text":"<p>\u79fb\u9664\u4f4e\u8d28\u91cf\u7684\u7ec4\u4ef6\uff0c\u5982\u5c0f\u7684\u8fde\u901a\u5206\u91cf\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ms</code> <p>pymeshlab.MeshSet \u5bf9\u8c61</p> required <p>Returns:</p> Type Description <p>pymeshlab.MeshSet \u5bf9\u8c61</p>"},{"location":"3d/#utils3d.algorithm.fix_redundant_by_meshlab","title":"<code>fix_redundant_by_meshlab(ms)</code>","text":"<p>\u5904\u7406\u5197\u4f59\u5143\u7d20\uff0c\u5982\u5408\u5e76\u4e34\u8fd1\u9876\u70b9\u3001\u79fb\u9664\u91cd\u590d\u9762\u548c\u9876\u70b9\u7b49\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ms</code> <p>pymeshlab.MeshSet \u5bf9\u8c61</p> required <p>Returns:</p> Type Description <p>pymeshlab.MeshSet \u5bf9\u8c61</p>"},{"location":"3d/#utils3d.algorithm.fix_topology_by_meshlab","title":"<code>fix_topology_by_meshlab(ms)</code>","text":"<p>\u4fee\u590d\u62d3\u6251\u95ee\u9898\uff0c\u5982 T \u578b\u9876\u70b9\u3001\u975e\u6d41\u5f62\u8fb9\u548c\u975e\u6d41\u5f62\u9876\u70b9\uff0c\u5e76\u5bf9\u9f50\u4e0d\u5339\u914d\u7684\u8fb9\u754c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ms</code> <p>pymeshlab.MeshSet \u5bf9\u8c61</p> required <p>Returns:</p> Type Description <p>pymeshlab.MeshSet \u5bf9\u8c61</p>"},{"location":"3d/#utils3d.algorithm.furthestsampling_jit","title":"<code>furthestsampling_jit(xyz, offset, new_offset)</code>","text":"<p>\u4f7f\u7528\u5e76\u884c\u6279\u6b21\u5904\u7406\u7684\u6700\u8fdc\u70b9\u91c7\u6837\u7b97\u6cd5\u5b9e\u73b0</p> <p>\u8be5\u65b9\u6cd5\u5c06\u8f93\u5165\u70b9\u4e91\u5212\u5206\u4e3a\u591a\u4e2a\u6279\u6b21\uff0c\u6bcf\u4e2a\u6279\u6b21\u72ec\u7acb\u8fdb\u884c\u6700\u8fdc\u70b9\u91c7\u6837\u3002\u901a\u8fc7\u7ef4\u62a4\u6700\u5c0f\u8ddd\u79bb\u6570\u7ec4\uff0c \u786e\u4fdd\u6bcf\u6b21\u8fed\u4ee3\u9009\u62e9\u8ddd\u79bb\u5df2\u9009\u70b9\u96c6\u6700\u8fdc\u7684\u65b0\u70b9\uff0c\u5b9e\u73b0\u9ad8\u6548\u91c7\u6837\u3002</p> <p>Parameters:</p> Name Type Description Default <code>xyz</code> <code>ndarray</code> <p>\u8f93\u5165\u70b9\u4e91\u5750\u6807\uff0c\u5f62\u72b6\u4e3a(N, 3)\u7684C\u8fde\u7eedfloat32\u6570\u7ec4</p> required <code>offset</code> <code>ndarray</code> <p>\u539f\u59cb\u70b9\u4e91\u7684\u5206\u6bb5\u504f\u79fb\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u6279\u6b21\u7684\u7ed3\u675f\u4f4d\u7f6e\u3002\u4f8b\u5982[1000, 2000]\u8868\u793a\u4e24\u4e2a\u6279\u6b21</p> required <code>new_offset</code> <code>ndarray</code> <p>\u91c7\u6837\u540e\u7684\u5206\u6bb5\u504f\u79fb\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u6279\u6b21\u7684\u76ee\u6807\u91c7\u6837\u6570\u3002\u4f8b\u5982[200, 400]\u8868\u793a\u6bcf\u6279\u91c7200\u70b9</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: \u91c7\u6837\u70b9\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(total_samples,)\uff0c\u5176\u4e2dtotal_samples = new_offset[-1]</p> Notes <p>\u5b9e\u73b0\u7279\u70b9: - \u4f7f\u7528Numba\u5e76\u884c\u52a0\u901f\uff0c\u652f\u6301\u591a\u6838\u5e76\u884c\u5904\u7406\u4e0d\u540c\u6279\u6b21 - \u91c7\u7528\u5e73\u65b9\u8ddd\u79bb\u8ba1\u7b97\u907f\u514d\u5f00\u65b9\u8fd0\u7b97 - \u6bcf\u6279\u6b21\u72ec\u7acb\u521d\u59cb\u5316\u8ddd\u79bb\u6570\u7ec4\uff0c\u907f\u514d\u8de8\u6279\u6b21\u5e72\u6270 - \u81ea\u52a8\u5904\u7406\u8fb9\u754c\u60c5\u51b5\uff08\u7a7a\u6279\u6b21\u6216\u96f6\u91c7\u6837\u6279\u6b21\uff09</p> <p>\u5178\u578b\u8c03\u7528\u6d41\u7a0b:</p> <p>n_total = 10000 offset = np.array([1000, 2000, ..., 10000], dtype=np.int32) new_offset = np.array([200, 400, ..., 2000], dtype=np.int32) sampled_indices = furthestsampling_jit(xyz, offset, new_offset)</p>"},{"location":"3d/#utils3d.algorithm.get_axis_rotation","title":"<code>get_axis_rotation(axis, angle)</code>","text":"<pre><code>\u7ed5\u7740\u6307\u5b9a\u8f74\u83b7\u53d63*3\u65cb\u8f6c\u77e9\u9635\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>axis</code> <code>list</code> <p>\u8f74\u5411,[0,0,1]</p> required <code>angle</code> <code>float</code> <p>\u65cb\u8f6c\u89d2\u5ea6,90.0</p> required <p>Returns:</p> Type Description <code>array</code> <p>3*3\u65cb\u8f6c\u77e9\u9635</p>"},{"location":"3d/#utils3d.algorithm.get_obb_box","title":"<code>get_obb_box(x_pts, z_pts, vertices)</code>","text":"<p>\u7ed9\u5b9a\u4efb\u610f2\u4e2a\u8f74\u5411\u4ea4\u70b9\u53ca\u9876\u70b9\uff0c\u8fd4\u56de\u5b9a\u5411\u5305\u56f4\u6846mesh Args:     x_pts: x\u8f74\u4ea4\u70b9     z_pts: z\u8f74\u4ea4\u70b9     vertices: \u6240\u6709\u9876\u70b9</p> <p>Returns:</p> Type Description <code>Tuple[list, list, array]</code> <p>\u5305\u56f4\u6846\u7684\u9876\u70b9\uff0c \u9762\u7247\u7d22\u5f15\uff0c3*3\u65cb\u8f6c\u77e9\u9635</p>"},{"location":"3d/#utils3d.algorithm.get_obb_box_max_min","title":"<code>get_obb_box_max_min(x_pts, z_pts, z_max_pts, z_min_pts, x_max_pts, x_min_pts, y_max_pts, y_min_pts, center)</code>","text":"<p>\u7ed9\u5b9a\u4efb\u610f2\u4e2a\u8f74\u5411\u4ea4\u70b9\u53ca\u6700\u5927/\u6700\u5c0f\u70b9\uff0c\u8fd4\u56de\u5b9a\u5411\u5305\u56f4\u6846mesh</p> <p>Parameters:</p> Name Type Description Default <code>x_pts</code> <code>array</code> <p>x\u8f74\u4ea4\u70b9</p> required <code>z_pts</code> <code>array</code> <p>z\u8f74\u4ea4\u70b9</p> required <code>z_max_pts</code> <code>array</code> <p>\u6700\u5927z\u9876\u70b9</p> required <code>z_min_pts</code> <code>array</code> <p>\u6700\u5c0fz\u9876\u70b9</p> required <code>x_max_pts</code> <code>array</code> <p>\u6700\u5927x\u9876\u70b9</p> required <code>x_min_pts</code> <code>array</code> <p>\u6700\u5c0fx\u9876\u70b9</p> required <code>y_max_pts</code> <code>array</code> <p>\u6700\u5927y\u9876\u70b9</p> required <code>y_min_pts</code> <code>array</code> <p>\u6700\u5c0fy\u9876\u70b9</p> required <code>center</code> <code>array</code> <p>\u4e2d\u5fc3\u70b9</p> required <p>Returns:</p> Type Description <code>Tuple[list, list, array]</code> <p>\u5305\u56f4\u6846\u7684\u9876\u70b9\uff0c \u9762\u7247\u7d22\u5f15\uff0c3*3\u65cb\u8f6c\u77e9\u9635</p>"},{"location":"3d/#utils3d.algorithm.get_pca_rotation","title":"<code>get_pca_rotation(vertices)</code>","text":"<pre><code>\u901a\u8fc7pca\u5206\u6790\u9876\u70b9\uff0c\u83b7\u53d63*3\u65cb\u8f6c\u77e9\u9635\uff0c\u5e76\u5e94\u7528\u5230\u9876\u70b9\uff1b\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>array</code> <p>\u4e09\u7ef4\u9876\u70b9</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u5e94\u7528\u65cb\u8f6c\u77e9\u9635\u540e\u7684\u9876\u70b9</p>"},{"location":"3d/#utils3d.algorithm.get_pca_transform","title":"<code>get_pca_transform(mesh)</code>","text":"<pre><code>\u5c06\u8f93\u5165\u7684\u9876\u70b9\u6570\u636e\u6839\u636e\u66f2\u7387\u53caPCA\u5206\u6790\u5f97\u5230\u7684\u4e3b\u6210\u5206\u5411\u91cf\uff0c\n\u5e76\u8f6c\u6362\u62104*4\u53d8\u6362\u77e9\u9635\u3002\n</code></pre> Notes <p>\u5fc5\u987b\u4e3a\u5e95\u90e8\u975e\u5c01\u95ed\u7684\u7f51\u683c</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>Mesh</code> <p>vedo\u7f51\u683c\u5bf9\u8c61</p> required <p>Returns:</p> Type Description <code>array</code> <p>4*4 \u53d8\u6362\u77e9\u9635</p>"},{"location":"3d/#utils3d.algorithm.harmonic_by_igl","title":"<code>harmonic_by_igl(v, f, map_vertices_to_circle=True)</code>","text":"<p>\u8c10\u6ce2\u53c2\u6570\u5316\u540e\u76842D\u7f51\u683c</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>_type_</code> <p>\u9876\u70b9</p> required <code>f</code> <code>_type_</code> <p>\u9762\u7247</p> required <code>map_vertices_to_circle</code> <p>\u662f\u5426\u6620\u5c04\u5230\u5706\u5f62\uff08\u6b63\u65b9\u5f62)</p> <code>True</code> <p>Returns:</p> Type Description <p>uv,v_p: \u521b\u5efa\u53c2\u6570\u5316\u540e\u76842D\u7f51\u683c,3D\u5750\u6807</p> <p>Note:</p> <pre><code>```\n\n# \u521b\u5efa\u7a7a\u95f4\u7d22\u5f15\nuv_kdtree = KDTree(uv)\n\n# \u521d\u59cb\u5316\u53ef\u89c6\u5316\u7cfb\u7edf\nplt = Plotter(shape=(1, 2), axes=False, title=\"Interactive Parametrization\")\n\n# \u521b\u5efa\u7f51\u683c\u5bf9\u8c61\nmesh_3d = Mesh([v, f]).cmap(\"jet\", calculate_curvature(v, f)).lighting(\"glossy\")\nmesh_2d = Mesh([v_p, f]).wireframe(True).cmap(\"jet\", calculate_curvature(v, f))\n\n# \u5b58\u50a8\u9009\u4e2d\u6807\u8bb0\nmarkers_3d = []\nmarkers_2d = []\n\ndef on_click(event):\n    if not event.actor or event.actor not in [mesh_2d, None]:\n        return\n    if not hasattr(event, 'picked3d') or event.picked3d is None:\n        return\n\n    try:\n        # \u83b7\u53d6\u70b9\u51fb\u5750\u6807\n        uv_click = np.array(event.picked3d[:2])\n\n        # \u67e5\u627e\u6700\u8fd1\u9876\u70b9\n        _, idx = uv_kdtree.query(uv_click)\n        v3d = v[idx]\n        uv_point = uv[idx]  # \u83b7\u53d6\u5bf9\u5e942D\u5750\u6807\n\n\n        # \u521b\u5efa3D\u6807\u8bb0\uff08\u4f7f\u7528\u7403\u4f53\uff09\n        marker_3d = Sphere(v3d, r=0.1, c='cyan', res=12)\n        markers_3d.append(marker_3d)\n\n        # \u521b\u5efa2D\u6807\u8bb0\uff08\u4f7f\u7528\u5927\u53f7\u70b9\uff09\n        marker_2d = Point(uv_point, c='magenta', r=10, alpha=0.8)\n        markers_2d.append(marker_2d)\n\n        # \u66f4\u65b0\u89c6\u56fe\n        plt.at(0).add(marker_3d)\n        plt.at(1).add(marker_2d)\n        plt.render()\n\n    except Exception as e:\n        print(f\"Error processing click: {str(e)}\")\n\nplt.at(0).show(mesh_3d, \"3D Visualization\", viewup=\"z\")\nplt.at(1).show(mesh_2d, \"2D Parametrization\").add_callback('mouse_click', on_click)\nplt.interactive().close()\n\n\n```\n</code></pre>"},{"location":"3d/#utils3d.algorithm.hole_filling_by_Radial","title":"<code>hole_filling_by_Radial(boundary_coords)</code>","text":"<p>\u53c2\u8003 </p> <p>[https://www.cnblogs.com/shushen/p/5759679.html]</p> <p>\u5b9e\u73b0\u7684\u6700\u5c0f\u89d2\u5ea6\u6cd5\u8865\u6d1e\u6cd5\uff1b</p> <p>Parameters:</p> Name Type Description Default <code>boundary_coords</code> <code>_type_</code> <p>\u6709\u5e8f\u8fb9\u754c\u9876\u70b9</p> required <p>Returns:</p> Type Description <p>v,f: \u4fee\u8865\u540e\u7684\u66f2\u9762</p> Note <pre><code>\n# \u521b\u5efa\u5e26\u5b54\u6d1e\u7684\u7b80\u5355\u7f51\u683c\ns = vedo.load(r\"J10166160052_16.obj\")\n# \u5047\u8bbe\u8fb9\u754c\u70b9\u5373\u7f51\u683c\u8fb9\u754c\u70b9\nboundary =vedo.Spline((s.boundaries().join(reset=True).vertices),res=100)\n# \u901a\u8fc7\u8fb9\u754c\u70b9\u8fdb\u884c\u8865\u6d1e\nfilled_mesh =vedo.Mesh(hole_filling(boundary.vertices))\n# \u6e32\u67d3\u8865\u6d1e\u540e\u7684\u66f2\u9762\nvedo.show([filled_mesh,boundary,s.alpha(0.8)], bg='white').close()\n\n</code></pre>"},{"location":"3d/#utils3d.algorithm.homogenizing_mesh","title":"<code>homogenizing_mesh(vedo_mesh, target_num=10000)</code>","text":"<p>\u5bf9\u7ed9\u5b9a\u7684 vedo \u7f51\u683c\u8fdb\u884c\u5747\u8d28\u5316\u5904\u7406\uff0c\u4f7f\u5176\u8fbe\u5230\u6307\u5b9a\u7684\u76ee\u6807\u9762\u6570\u3002</p> <p>\u8be5\u51fd\u6570\u4f7f\u7528 pyacvd \u5e93\u4e2d\u7684 Clustering \u7c7b\u5bf9\u8f93\u5165\u7684 vedo \u7f51\u683c\u8fdb\u884c\u5904\u7406\u3002 \u5982\u679c\u7f51\u683c\u7684\u9876\u70b9\u6570\u5c0f\u4e8e\u7b49\u4e8e\u76ee\u6807\u9762\u6570\uff0c\u4f1a\u5148\u5bf9\u7f51\u683c\u8fdb\u884c\u7ec6\u5206\uff0c\u7136\u540e\u8fdb\u884c\u805a\u7c7b\u64cd\u4f5c\uff0c \u6700\u7ec8\u751f\u6210\u4e00\u4e2a\u9762\u6570\u63a5\u8fd1\u76ee\u6807\u9762\u6570\u7684\u5747\u8d28\u5316\u7f51\u683c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>vedo_mesh</code> <code>Mesh</code> <p>\u8f93\u5165\u7684 vedo \u7f51\u683c\u5bf9\u8c61\uff0c\u9700\u8981\u8fdb\u884c\u5747\u8d28\u5316\u5904\u7406\u7684\u7f51\u683c\u3002</p> required <code>target_num</code> <code>int</code> <p>\u76ee\u6807\u9762\u6570\uff0c\u5373\u7ecf\u8fc7\u5904\u7406\u540e\u7f51\u683c\u7684\u9762\u6570\u63a5\u8fd1\u8be5\u503c\u3002 \u9ed8\u8ba4\u4e3a 10000\u3002</p> <code>10000</code> <p>Returns:</p> Type Description <p>vedo.Mesh: \u7ecf\u8fc7\u5747\u8d28\u5316\u5904\u7406\u540e\u7684 vedo \u7f51\u683c\u5bf9\u8c61\uff0c\u5176\u9762\u6570\u63a5\u8fd1\u76ee\u6807\u9762\u6570\u3002</p> Notes <p>\u8be5\u51fd\u6570\u4f9d\u8d56\u4e8e pyacvd \u548c pyvista \u5e93\uff0c\u4f7f\u7528\u524d\u8bf7\u786e\u4fdd\u8fd9\u4e9b\u5e93\u5df2\u6b63\u786e\u5b89\u88c5\u3002</p>"},{"location":"3d/#utils3d.algorithm.isotropic_remeshing_pymeshlab","title":"<code>isotropic_remeshing_pymeshlab(vertices, faces, target_edge_length=0.5, iterations=1)</code>","text":"<p>\u4f7f\u7528 PyMeshLab \u5b9e\u73b0\u7f51\u683c\u5747\u5300\u5316\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <p>\u8f93\u5165\u7684\u7f51\u683c\u5bf9\u8c61 (pymeshlab.MeshSet)\u3002</p> required <code>target_edge_length</code> <p>\u76ee\u6807\u8fb9\u957f\u6bd4\u4f8b %\u3002</p> <code>0.5</code> <code>iterations</code> <p>\u8fed\u4ee3\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a 1\u3002</p> <code>1</code> <p>Returns:</p> Type Description <code>Mesh</code> <p>\u5747\u5300\u5316\u540e\u7684\u7f51\u683c\u5bf9\u8c61\u3002</p>"},{"location":"3d/#utils3d.algorithm.labels2colors","title":"<code>labels2colors(labels)</code>","text":"<p>\u5c06labels\u8f6c\u6362\u6210\u989c\u8272\u6807\u7b7e Args:     labels: numpy\u7c7b\u578b,\u5f62\u72b6(N)\u5bf9\u5e94\u9876\u70b9\u7684\u6807\u7b7e\uff1b</p> <p>Returns:</p> Type Description <p>RGBA\u989c\u8272\u6807\u7b7e;</p>"},{"location":"3d/#utils3d.algorithm.labels_mapping","title":"<code>labels_mapping(old_vertices, old_faces, new_vertices, old_labels, fast=True)</code>","text":"<p>\u5c06\u539f\u59cb\u7f51\u683c\u7684\u6807\u7b7e\u5c5e\u6027\u7cbe\u786e\u6620\u5c04\u5230\u65b0\u7f51\u683c</p> \u53c2\u6570 <p>old_mesh(vedo) : \u539f\u59cb\u7f51\u683c\u5bf9\u8c61 new_mesh(vedo): \u91cd\u7f51\u683c\u5316\u540e\u7684\u65b0\u7f51\u683c\u5bf9\u8c61 old_labels (np.ndarray): \u539f\u59cb\u9876\u70b9\u6807\u7b7e\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (N,) </p> \u8fd4\u56de <p>new_labels (np.ndarray): \u6620\u5c04\u540e\u7684\u65b0\u9876\u70b9\u6807\u7b7e\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a (M,)</p>"},{"location":"3d/#utils3d.algorithm.load_all","title":"<code>load_all(path)</code>","text":"<p>\u8bfb\u53d6\u5404\u79cd\u683c\u5f0f\u7684\u6587\u4ef6</p> <p>Returns:</p> Name Type Description <code>data</code> <p>\u8bfb\u53d6\u7684\u6570\u636e\uff0c\u5931\u8d25\u8fd4\u56deNone\uff1b</p>"},{"location":"3d/#utils3d.algorithm.mesh2sdf","title":"<code>mesh2sdf(v, f, size=64)</code>","text":"<p>\u4f53\u7d20\u5316\u7f51\u683c\uff0c\u8be5\u51fd\u6570\u9002\u7528\u4e8e\u975e\u6c34\u5bc6\u7f51\u683c\uff08\u5e26\u5b54\u7684\u7f51\u683c\uff09\u3001\u81ea\u76f8\u4ea4\u7f51\u683c\u3001\u5177\u6709\u975e\u6d41\u5f62\u51e0\u4f55\u4f53\u7684\u7f51\u683c\u4ee5\u53ca\u5177\u6709\u65b9\u5411\u4e0d\u4e00\u81f4\u7684\u9762\u7684\u7f51\u683c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>array - like</code> <p>\u7f51\u683c\u7684\u9876\u70b9\u6570\u7ec4\u3002</p> required <code>f</code> <code>array - like</code> <p>\u7f51\u683c\u7684\u9762\u6570\u7ec4\u3002</p> required <code>size</code> <code>int</code> <p>\u4f53\u7d20\u5316\u7684\u5927\u5c0f\uff0c\u9ed8\u8ba4\u4e3a 64\u3002</p> <code>64</code> <p>Returns:</p> Name Type Description <code>array</code> <p>\u4f53\u7d20\u5316\u540e\u7684\u6570\u7ec4\u3002</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 'mesh-to-sdf' \u5e93\uff0c\u4f1a\u63d0\u793a\u5b89\u88c5\u3002</p>"},{"location":"3d/#utils3d.algorithm.resample_mesh","title":"<code>resample_mesh(vertices, faces, density=1, num_samples=None)</code>","text":"<p>\u5728\u7531\u9876\u70b9\u548c\u9762\u5b9a\u4e49\u7684\u7f51\u683c\u8868\u9762\u4e0a\u8fdb\u884c\u70b9\u4e91\u91cd\u91c7\u6837\u3002</p> <ol> <li>\u5bc6\u5ea6\u6a21\u5f0f\uff1a\u6839\u636e\u5355\u4f4d\u9762\u7247\u9762\u79ef\u81ea\u52a8\u8ba1\u7b97\u603b\u91c7\u6837\u6570</li> <li>\u6307\u5b9a\u6570\u91cf\u6a21\u5f0f\uff1a\u76f4\u63a5\u6307\u5b9a\u9700\u8981\u91c7\u6837\u7684\u603b\u70b9\u6570</li> </ol> <p>\u8be5\u51fd\u6570\u4f7f\u7528\u5411\u91cf\u5316\u64cd\u4f5c\u9ad8\u6548\u5730\u5728\u7f51\u683c\u8868\u9762\u8fdb\u884c\u5747\u5300\u91c7\u6837\uff0c\u91c7\u6837\u5bc6\u5ea6\u7531\u5355\u4f4d\u9762\u79ef\u70b9\u6570\u51b3\u5b9a\u3002 \u91c7\u6837\u7b56\u7565\u57fa\u4e8e\u91cd\u5fc3\u5750\u6807\u7cfb\uff0c\u91c7\u7528\u5206\u5c42\u968f\u673a\u62bd\u6837\u65b9\u6cd5\u3002</p> <p>\u6ce8\u610f\uff1a     \u96f6\u9762\u79ef\u4e09\u89d2\u5f62\u4f1a\u88ab\u81ea\u52a8\u8df3\u8fc7\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u5206\u914d\u91c7\u6837\u70b9\u3002</p> <p>\u53c2\u8003\u5b9e\u73b0\uff1a     https://chrischoy.github.io/research/barycentric-coordinate-for-mesh-sampling/</p> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>ndarray</code> <p>\u7f51\u683c\u9876\u70b9\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(V, 3)\uff0cV\u8868\u793a\u9876\u70b9\u6570\u91cf</p> required <code>faces</code> <code>ndarray</code> <p>\u4e09\u89d2\u5f62\u9762\u7247\u7d22\u5f15\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(F, 3)\uff0c\u6570\u636e\u7c7b\u578b\u5e94\u4e3a\u6574\u6570</p> required <code>density</code> <code>(float, \u53ef\u9009)</code> <p>\u6bcf\u5355\u4f4d\u9762\u79ef\u7684\u91c7\u6837\u70b9\u6570\uff0c\u9ed8\u8ba4\u4e3a1</p> <code>1</code> <code>num_samples</code> <code>(int, \u53ef\u9009)</code> <p>\u6307\u5b9a\u603b\u91c7\u6837\u70b9\u6570\uff0c\u82e5\u63d0\u4f9b\u5219\u5ffd\u7565density\u53c2\u6570</p> <code>None</code> <p>Returns:</p> Type Description <p>numpy.ndarray: \u91cd\u91c7\u6837\u540e\u7684\u70b9\u4e91\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N, 3)\uff0cN\u4e3a\u603b\u91c7\u6837\u70b9\u6570</p> Notes <p>\u91c7\u6837\u70b9\u751f\u6210\u516c\u5f0f\uff08\u91cd\u5fc3\u5750\u6807\u7cfb\uff09\uff1a     P = (1 - \u221ar\u2081)A + \u221ar\u2081(1 - r\u2082)B + \u221ar\u2081 r\u2082 C \u5176\u4e2d\uff1a - r\u2081, r\u2082 \u2208 [0, 1) \u4e3a\u968f\u673a\u6570 - A, B, C \u4e3a\u4e09\u89d2\u5f62\u9876\u70b9 - \u8be5\u516c\u5f0f\u53ef\u786e\u4fdd\u5728\u4e09\u89d2\u5f62\u8868\u9762\u5747\u5300\u91c7\u6837</p> <p>\u7b97\u6cd5\u6d41\u7a0b\uff1a 1. \u8ba1\u7b97\u6bcf\u4e2a\u9762\u7684\u9762\u79ef\u5e76\u5206\u914d\u91c7\u6837\u70b9\u6570 2. \u901a\u8fc7\u968f\u673a\u820d\u5165\u5904\u7406\u603b\u70b9\u6570\u8bef\u5dee 3. \u4f7f\u7528\u5411\u91cf\u5316\u64cd\u4f5c\u6279\u91cf\u751f\u6210\u91c7\u6837\u70b9</p> References <p>[1] Barycentric coordinate system - https://en.wikipedia.org/wiki/Barycentric_coordinate_system</p>"},{"location":"3d/#utils3d.algorithm.restore_transform","title":"<code>restore_transform(vertices, transform)</code>","text":"<pre><code>\u6839\u636e\u63d0\u4f9b\u7684\u9876\u70b9\u53ca\u77e9\u9635\uff0c\u8fdb\u884c\u9006\u53d8\u6362(\u8fd8\u539f\u5e94\u7528\u77e9\u9635\u4e4b\u524d\u7684\u72b6\u6001\uff09\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>vertices</code> <code>array</code> <p>\u9876\u70b9</p> required <code>transform</code> <code>array</code> <p>4*4\u53d8\u6362\u77e9\u9635</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u8fd8\u539f\u540e\u7684\u9876\u70b9\u5750\u6807</p>"},{"location":"3d/#utils3d.algorithm.sample_sdf_mesh","title":"<code>sample_sdf_mesh(v, f, number_of_points=200000)</code>","text":"<p>\u5728\u66f2\u9762\u9644\u8fd1\u4e0d\u5747\u5300\u5730\u91c7\u6837 SDF \u70b9\uff0c\u8be5\u51fd\u6570\u9002\u7528\u4e8e\u975e\u6c34\u5bc6\u7f51\u683c\uff08\u5e26\u5b54\u7684\u7f51\u683c\uff09\u3001\u81ea\u76f8\u4ea4\u7f51\u683c\u3001\u5177\u6709\u975e\u6d41\u5f62\u51e0\u4f55\u4f53\u7684\u7f51\u683c\u4ee5\u53ca\u5177\u6709\u65b9\u5411\u4e0d\u4e00\u81f4\u7684\u9762\u7684\u7f51\u683c\u3002 \u8fd9\u662f DeepSDF \u8bba\u6587\u4e2d\u63d0\u51fa\u548c\u4f7f\u7528\u7684\u65b9\u6cd5\u3002</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>array - like</code> <p>\u7f51\u683c\u7684\u9876\u70b9\u6570\u7ec4\u3002</p> required <code>f</code> <code>array - like</code> <p>\u7f51\u683c\u7684\u9762\u6570\u7ec4\u3002</p> required <code>number_of_points</code> <code>int</code> <p>\u91c7\u6837\u70b9\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u4e3a 200000\u3002</p> <code>200000</code> <p>Returns:</p> Name Type Description <code>tuple</code> <p>\u5305\u542b\u91c7\u6837\u70b9\u6570\u7ec4\u548c\u5bf9\u5e94\u7684 SDF \u503c\u6570\u7ec4\u7684\u5143\u7ec4\u3002</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 'mesh-to-sdf' \u5e93\uff0c\u4f1a\u63d0\u793a\u5b89\u88c5\u3002</p>"},{"location":"3d/#utils3d.algorithm.save_np_json","title":"<code>save_np_json(output_path, obj)</code>","text":"<p>\u4fdd\u5b58np\u5f62\u5f0f\u7684json</p> <p>Parameters:</p> Name Type Description Default <code>output_path</code> <code>str</code> <p>\u4fdd\u5b58\u8def\u5f84</p> required <code>obj</code> <p>\u4fdd\u5b58\u5bf9\u8c61</p> required"},{"location":"3d/#utils3d.algorithm.simplify_by_meshlab","title":"<code>simplify_by_meshlab(vertices, faces, max_facenum=30000)</code>","text":"<p>\u901a\u8fc7\u4e8c\u6b21\u8fb9\u6298\u53e0\u7b97\u6cd5\u51cf\u5c11\u7f51\u683c\u4e2d\u7684\u9762\u6570\uff0c\u7b80\u5316\u6a21\u578b\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>MeshSet</code> <p>\u8f93\u5165\u7684\u7f51\u683c\u6a21\u578b\u3002</p> required <code>max_facenum</code> <code>int</code> <p>\u7b80\u5316\u540e\u7684\u76ee\u6807\u6700\u5927\u9762\u6570\uff0c\u9ed8\u8ba4\u4e3a 200000\u3002</p> <code>30000</code> <p>Returns:</p> Type Description <code>Mesh</code> <p>pymeshlab.MeshSet: \u7b80\u5316\u540e\u7684\u7f51\u683c\u6a21\u578b\u3002</p>"},{"location":"3d/#utils3d.algorithm.vertex_labels_to_face_labels","title":"<code>vertex_labels_to_face_labels(faces, vertex_labels)</code>","text":"<pre><code>\u5c06\u4e09\u89d2\u7f51\u683c\u7684\u9876\u70b9\u6807\u7b7e\u8f6c\u6362\u6210\u9762\u7247\u6807\u7b7e\uff0c\u5b58\u5728\u4e00\u4e2a\u9762\u7247\uff0c\u591a\u4e2a\u5c5e\u6027\uff0c\u5219\u83b7\u53d6\u51fa\u73b0\u6700\u591a\u7684\u5c5e\u6027\u3002\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>faces</code> <code>Union[array, list]</code> <p>\u4e09\u89d2\u7f51\u683c\u9762\u7247\u7d22\u5f15</p> required <code>vertex_labels</code> <code>Union[array, list]</code> <p>\u9876\u70b9\u6807\u7b7e</p> required <p>Returns:</p> Type Description <code>array</code> <p>\u9762\u7247\u5c5e\u6027</p>"},{"location":"3d/#utils3d.algorithm.voxel2array","title":"<code>voxel2array(grid_index_array, voxel_size=32)</code>","text":"<p>\u5c06 voxel_grid_index \u6570\u7ec4\u8f6c\u6362\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u4e09\u7ef4\u6570\u7ec4\u3002</p> <p>\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5f62\u72b6\u4e3a (N, 3) \u7684 voxel_grid_index \u6570\u7ec4\uff0c \u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u5f62\u72b6\u4e3a (voxel_size, voxel_size, voxel_size) \u7684\u4e09\u7ef4\u6570\u7ec4\u3002 \u5176\u4e2d\uff0c\u539f voxel_grid_index \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u7f51\u683c\u7d22\u5f15\uff0c \u5728\u8f6c\u6362\u540e\u7684\u4e09\u7ef4\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u4f1a\u88ab\u8bbe\u4e3a 1\uff0c\u5176\u4f59\u4f4d\u7f6e\u4e3a 0\u3002</p> <p>Parameters:</p> Name Type Description Default <code>grid_index_array</code> <code>ndarray</code> <p>\u5f62\u72b6\u4e3a (N, 3) \u7684\u6570\u7ec4\uff0c \u901a\u5e38\u4ece open3d \u7684 o3d.voxel_grid.get_voxels() \u65b9\u6cd5\u83b7\u53d6\uff0c \u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6bcf\u4e2a\u4f53\u7d20\u7684\u7f51\u683c\u7d22\u5f15\u3002</p> required <code>voxel_size</code> <code>int</code> <p>\u8f6c\u6362\u540e\u4e09\u7ef4\u6570\u7ec4\u7684\u8fb9\u957f\uff0c\u9ed8\u8ba4\u4e3a 32\u3002</p> <code>32</code> <p>Returns:</p> Type Description <p>numpy.ndarray: \u5f62\u72b6\u4e3a (voxel_size, voxel_size, voxel_size) \u7684\u4e09\u7ef4\u6570\u7ec4\uff0c \u5176\u4e2d\u539f voxel_grid_index \u6570\u7ec4\u5bf9\u5e94\u7684\u7f51\u683c\u7d22\u5f15\u4f4d\u7f6e\u503c\u4e3a 1\uff0c\u5176\u4f59\u4e3a 0\u3002</p> Example <pre><code># \u83b7\u53d6 grid_index_array\nvoxel_list = voxel_grid.get_voxels()\ngrid_index_array = list(map(lambda x: x.grid_index, voxel_list))\ngrid_index_array = np.array(grid_index_array)\nvoxel_grid_array = voxel2array(grid_index_array, voxel_size=32)\ngrid_index_array = array2voxel(voxel_grid_array)\npointcloud_array = grid_index_array  # 0.03125 \u662f\u4f53\u7d20\u5927\u5c0f\npc = o3d.geometry.PointCloud()\npc.points = o3d.utility.Vector3dVector(pointcloud_array)\no3d_voxel = o3d.geometry.VoxelGrid.create_from_point_cloud(pc, voxel_size=0.05)\no3d.visualization.draw_geometries([pcd, cc, o3d_voxel])\n</code></pre>"},{"location":"3d/#utils3d.augment.dataAugment","title":"<code>dataAugment(self, xyz, jitter=False, flip=False, rot=False, jitter_std=0.1)</code>","text":"<p>\u5bf9\u4e09\u7ef4\u70b9\u4e91\u6570\u636e\u8fdb\u884c\u6570\u636e\u589e\u5f3a\uff0c\u652f\u6301\u4efb\u610f\u65cb\u8f6c\u8f74\u548c\u566a\u58f0\u63a7\u5236</p> <p>\u53d8\u6362\u5305\u542b\uff08\u542f\u7528\u65f6\u6309\u987a\u5e8f\u6267\u884c\uff09\uff1a 1. \u6296\u52a8\uff1a\u5411\u53d8\u6362\u77e9\u9635\u6dfb\u52a0\u53ef\u63a7\u5e45\u5ea6\u7684\u968f\u673a\u566a\u58f0 2. \u7ffb\u8f6c\uff1a\u968f\u673a\u7ffb\u8f6cx\u8f74\u65b9\u5411 3. \u65cb\u8f6c\uff1a\u7ed5\u4efb\u610f\u8f74\u8fdb\u884c\u968f\u673a\u89d2\u5ea6\u65cb\u8f6c</p> <p>\u6ce8\u610f\uff1a - \u53d8\u6362\u7ec4\u5408\u987a\u5e8f\u4e3a\uff1a\u6296\u52a8 -&gt; \u7ffb\u8f6c -&gt; \u65cb\u8f6c - \u77e9\u9635\u4e58\u6cd5\u987a\u5e8f\u4e3a\u53f3\u4e58\uff0c\u5373\u6700\u7ec8\u53d8\u6362\u77e9\u9635 m = m_jitter @ m_flip @ m_rot - \u70b9\u4e91\u5750\u6807\u91c7\u7528\u77e9\u9635\u53f3\u4e58\u65b9\u5f0f\u53d8\u6362\uff1axyz' = xyz @ m</p> <p>Parameters:</p> Name Type Description Default <code>xyz</code> <code>ndarray</code> <p>\u8f93\u5165\u70b9\u4e91 (N,3)</p> required <code>jitter</code> <code>bool</code> <p>\u662f\u5426\u6dfb\u52a0\u77e9\u9635\u6296\u52a8 (\u9ed8\u8ba4False)</p> <code>False</code> <code>flip</code> <code>bool</code> <p>\u662f\u5426\u968f\u673ax\u8f74\u7ffb\u8f6c (\u9ed8\u8ba4False)</p> <code>False</code> <code>rot</code> <code>bool</code> <p>\u662f\u5426\u4efb\u610f\u8f74\u65cb\u8f6c (\u9ed8\u8ba4False)</p> <code>False</code> <code>jitter_std</code> <code>float</code> <p>\u566a\u58f0\u6807\u51c6\u5dee (\u9ed8\u8ba40.1)</p> <code>0.1</code> <p>Returns:</p> Type Description <p>np.ndarray: \u589e\u5f3a\u540e\u7684\u70b9\u4e91 (N,3)</p> Example <p>aug_xyz = dataAugment(xyz, jitter=True, rot=True, jitter_std=0.2)</p>"},{"location":"3d/#utils3d.dental_tools.convert_fdi2idx","title":"<code>convert_fdi2idx(labels)</code>","text":"<p>\u5c06\u53e3\u8154\u7259\u5217\u7684fid (11-18,21-28,31-38,41-48) \u8f6c\u6362\u62101-18;</p>"},{"location":"3d/#utils3d.dental_tools.convert_labels2color","title":"<code>convert_labels2color(data)</code>","text":"<pre><code>\u5c06\u7259\u9f7f\u6807\u7b7e\u8f6c\u6362\u6210RGBA\u989c\u8272\n</code></pre> Notes <p>\u53ea\u652f\u6301\u4ee5\u4e0b\u6807\u7b7e\u7c7b\u578b\uff1a</p> <pre><code>upper_dict = [0, 18, 17, 16, 15, 14, 13, 12, 11, 21, 22, 23, 24, 25, 26, 27, 28]\n\nlower_dict = [0, 48, 47, 46, 45, 44, 43, 42, 41, 31, 32, 33, 34, 35, 36, 37, 38]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[array, list]</code> <p>\u5c5e\u6027</p> required <p>Returns:</p> Name Type Description <code>colors</code> <code>list</code> <p>\u5bf9\u5e94\u5c5e\u6027\u7684RGBA\u7c7b\u578b\u989c\u8272</p>"},{"location":"3d/#utils3d.dental_tools.cut_mesh_point_loop_crow","title":"<code>cut_mesh_point_loop_crow(mesh, pts, error_show=True, invert=True)</code>","text":"<p>\u5b9e\u73b0\u7684\u57fa\u4e8e\u7ebf\u7684\u7259\u9f7f\u51a0\u5206\u5272;</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>_type_</code> <p>\u5f85\u5207\u5272\u7f51\u683c</p> required <code>pts</code> <code>Points / Line</code> <p>\u5207\u5272\u7ebf</p> required <code>error_show(bool,</code> <code>optional</code> <p>\u88c1\u526a\u5931\u8d25\u662f\u5426\u8fdb\u884c\u6e32\u67d3. Defaults to True.</p> required <code>invert(bool)</code> <p>\u662f\u5426\u53d6\u53cd\uff1b</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>\u5207\u5272\u540e\u7684\u7f51\u683c</p>"},{"location":"3d/#utils3d.dental_tools.transform_crown","title":"<code>transform_crown(near_mesh, jaw_mesh)</code>","text":"<pre><code>\u8c03\u6574\u5355\u51a0\u7684\u8f74\u5411\n</code></pre> Tip <p>1.\u901a\u8fc7\u8fde\u901a\u57df\u5206\u5272\u4e24\u4e2a\u90bb\u7259;</p> <p>2.\u4ee5\u90bb\u7259\u8d28\u5fc3\u4e3a\u786e\u5b9ax\u8f74\uff1b</p> <p>3.\u901a\u8fc7\u627e\u5bf9\u988c\u6700\u8fd1\u7684\u70b9\u786e\u5b9az\u8f74\u65b9\u5411;\u5982\u679cz\u8f74\u65b9\u5411\u4e0a\u6709mesh\uff0c\u5219\u4fdd\u6301\u539f\u6837\uff0c\u5426\u5219\u5c06z\u8f74\u53d6\u53cd\u5411;</p> <p>4.\u8f93\u51fa\u8c03\u6574\u540e\u7684\u7259\u51a0</p> <p>Parameters:</p> Name Type Description Default <code>near_mesh</code> <code>Mesh</code> <p>\u4e24\u4e2a\u90bb\u7259\u7ec4\u6210\u7684mesh</p> required <code>jaw_mesh</code> <code>Mesh</code> <p>\u4e24\u4e2a\u90bb\u7259\u7684\u5bf9\u988c</p> required <p>Returns:</p> Type Description <code>Mesh</code> <p>\u53d8\u6362\u540e\u7684\u5355\u51a0mesh</p>"},{"location":"3d/#utils3d.mesh.SindreMesh","title":"<code>SindreMesh</code>","text":"<p>\u4e09\u7ef4\u7f51\u683c\u4e2d\u8f6c\u7c7b\uff0c\u5047\u8bbe\u90fd\u662f\u4e09\u89d2\u9762\u7247</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.center","title":"<code>center: np.ndarray</code>  <code>cached</code> <code>property</code>","text":"<p>\u8ba1\u7b97\u7f51\u683c\u7684\u52a0\u6743\u8d28\u5fc3\uff08\u57fa\u4e8e\u9762\u7247\u9762\u79ef\u52a0\u6743\uff09\u3002</p> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: \u52a0\u6743\u8d28\u5fc3\u5750\u6807\uff0c\u5f62\u72b6\u4e3a (3,)\u3002</p> Notes <p>\u4f7f\u7528\u4e09\u89d2\u5f62\u9762\u7247\u9762\u79ef\u4f5c\u4e3a\u6743\u91cd\uff0c\u5bf9\u4e09\u89d2\u5f62\u8d28\u5fc3\u5750\u6807\u8fdb\u884c\u52a0\u6743\u5e73\u5747\u3002 \u8be5\u7ed3\u679c\u7b49\u4ef7\u4e8e\u7f51\u683c\u7684\u51e0\u4f55\u4e2d\u5fc3\u3002</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.faces_area","title":"<code>faces_area</code>  <code>cached</code> <code>property</code>","text":"<p>\u8ba1\u7b97\u6bcf\u4e2a\u4e09\u89d2\u5f62\u9762\u7247\u7684\u9762\u79ef\u3002</p> Notes <p>\u4f7f\u7528\u53c9\u4e58\u516c\u5f0f\u8ba1\u7b97\u9762\u79ef\uff1a \u9762\u79ef = 0.5 * ||(v1 - v0) \u00d7 (v2 - v0)||</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.faces_center","title":"<code>faces_center</code>  <code>cached</code> <code>property</code>","text":"<p>\u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u4e2d\u5fc3\uff08\u91cd\u5fc3 [1/3,1/3,1/3]\uff09</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.faces_vertices","title":"<code>faces_vertices</code>  <code>cached</code> <code>property</code>","text":"<p>\u5c06\u9762\u7247\u7d22\u5f15\u7528\u9876\u70b9\u6765\u8868\u793a</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.get_adj_list","title":"<code>get_adj_list</code>  <code>cached</code> <code>property</code>","text":"<p>\u90bb\u63a5\u8868\u5c5e\u6027</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.get_adj_matrix","title":"<code>get_adj_matrix</code>  <code>cached</code> <code>property</code>","text":"<p>\u57fa\u4e8e\u53bb\u91cd\u8fb9\u6784\u5efa\u90bb\u63a5\u77e9\u9635</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.get_edges","title":"<code>get_edges</code>  <code>cached</code> <code>property</code>","text":"<p>\u672a\u53bb\u91cd\u8fb9\u7f18\u5c5e\u6027</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.get_quality","title":"<code>get_quality</code>  <code>cached</code> <code>property</code>","text":"<p>\u7f51\u683c\u8d28\u91cf\u68c0\u6d4b</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.nfaces","title":"<code>nfaces</code>  <code>cached</code> <code>property</code>","text":"<p>\u83b7\u53d6\u9876\u70b9\u6570\u91cf</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.npoints","title":"<code>npoints</code>  <code>cached</code> <code>property</code>","text":"<p>\u83b7\u53d6\u9876\u70b9\u6570\u91cf</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.check","title":"<code>check()</code>","text":"<p>\u68c0\u6d4b\u6570\u636e\u5b8c\u6574\u6027,\u6b63\u5e38\u8fd4\u56deTrue</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.get_curvature","title":"<code>get_curvature()</code>","text":"<p>\u4f1a\u81ea\u52a8\u53bb\u9664\u672a\u4f7f\u7528\u70b9</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.get_texture","title":"<code>get_texture(write_path='texture_uv.png', image_size=(512, 512), uv=None)</code>","text":"<p>\u5c06\u989c\u8272\u8f6c\u6362\u4e3a\u7eb9\u7406\u8d34\u56fe,  Mesh([v, f]).texture(write_path,uv)</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.get_uv","title":"<code>get_uv(return_circle=False)</code>  <code>cached</code>","text":"<p>\u83b7\u53d6uv\u6620\u5c04 \u4e0e\u9876\u70b9\u4e00\u81f4(npoinst,2)</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.sample","title":"<code>sample(density=1, num_samples=None)</code>","text":"<p>\u7f51\u683c\u8868\u9762\u4e0a\u8fdb\u884c\u70b9\u4e91\u91cd\u91c7\u6837 Args:     density (float, \u53ef\u9009): \u6bcf\u5355\u4f4d\u9762\u79ef\u7684\u91c7\u6837\u70b9\u6570\uff0c\u9ed8\u8ba4\u4e3a1     num_samples (int, \u53ef\u9009): \u6307\u5b9a\u603b\u91c7\u6837\u70b9\u6570N\uff0c\u82e5\u63d0\u4f9b\u5219\u5ffd\u7565density\u53c2\u6570</p> <p>Returns:</p> Type Description <p>numpy.ndarray: \u91cd\u91c7\u6837\u540e\u7684\u70b9\u4e91\u6570\u7ec4\uff0c\u5f62\u72b6\u4e3a(N, 3)\uff0cN\u4e3a\u603b\u91c7\u6837\u70b9\u6570</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.show","title":"<code>show(show_append=[], labels=None, exclude_list=[0])</code>","text":"<p>\u6e32\u67d3\u5c55\u793a\u7f51\u683c\u6570\u636e\uff0c\u5e76\u6839\u636e\u6807\u7b7e\u6dfb\u52a0\u6807\u8bb0\u548c\u5750\u6807\u8f74\u3002</p> <p>Parameters:</p> Name Type Description Default <code>show_append</code> <code>list) </code> <p>\u9700\u8981\u4e00\u8d77\u6e32\u67d3\u7684vedo\u5c5e\u6027</p> <code>[]</code> <code>labels</code> <code>ndarray</code> <p>\u7f51\u683c\u9876\u70b9\u7684\u6807\u7b7e\u6570\u7ec4\uff0c\u9ed8\u8ba4\u4e3aNone\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u5c06\u6839\u636e\u6807\u7b7e\u4e3a\u9876\u70b9\u7740\u8272\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u975e\u6392\u9664\u6807\u7b7e\u6dfb\u52a0\u6807\u8bb0\u3002</p> <code>None</code> <code>exclude_list</code> <code>list</code> <p>\u8981\u6392\u9664\u7684\u6807\u7b7e\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3a[0]\u3002\u5217\u8868\u4e2d\u7684\u6807\u7b7e\u5bf9\u5e94\u7684\u6807\u8bb0\u4e0d\u4f1a\u88ab\u663e\u793a\u3002</p> <code>[0]</code> <p>Returns:</p> Name Type Description <code>None</code> <p>\u8be5\u65b9\u6cd5\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u76f4\u63a5\u8fdb\u884c\u6e32\u67d3\u5c55\u793a\u3002</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.texture2colors","title":"<code>texture2colors(image_path='texture_uv.png', uv=None)</code>","text":"<p>\u5c06\u7eb9\u7406\u8d34\u56fe\u8f6c\u6362\u6210\u9876\u70b9\u989c\u8272</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.to_dict","title":"<code>to_dict()</code>","text":"<p>\u5c06\u5c5e\u6027\u8f6c\u6362\u6210python\u5b57\u5178</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.to_json","title":"<code>to_json()</code>","text":"<p>\u8f6c\u6362\u6210json</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.to_meshlab","title":"<code>to_meshlab()</code>","text":"<p>\u8f6c\u6362\u6210meshlab</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.to_open3d","title":"<code>to_open3d()</code>","text":"<p>\u8f6c\u6362\u6210open3d</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.to_pytorch3d","title":"<code>to_pytorch3d(device='cpu')</code>","text":"<p>\u8f6c\u6362\u6210pytorch3d\u5f62\u5f0f</p> <p>Returns:</p> Name Type Description <code>mesh</code> <p>pytorch3d\u7c7b\u578bmesh</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.to_torch","title":"<code>to_torch(device='cpu')</code>","text":"<p>\u5c06\u9876\u70b9&amp;\u9762\u7247\u8f6c\u6362\u6210torch\u5f62\u5f0f</p> <p>Returns:</p> Type Description <p>vertices,faces,vertex_normals,vertex_colors: \u9876\u70b9\uff0c\u9762\u7247,\u6cd5\u7ebf\uff0c\u989c\u8272\uff08\u6ca1\u6709\u5219\u4e3aNone)</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.to_trimesh","title":"<code>to_trimesh()</code>","text":"<p>\u8f6c\u6362\u6210trimesh</p>"},{"location":"3d/#utils3d.mesh.SindreMesh.to_vedo","title":"<code>to_vedo()</code>","text":"<p>\u8f6c\u6362\u6210vedo</p>"},{"location":"3d/#utils3d.vedo_tools.matrix3d_by_vedo","title":"<code>matrix3d_by_vedo</code>","text":"<p>               Bases: <code>Plotter</code></p> <p>Generate a rendering window with slicing planes for the input Volume.</p>"},{"location":"3d/#utils3d.vedo_tools.matrix3d_by_vedo.__init__","title":"<code>__init__(data, cmaps=('gist_ncar_r', 'hot_r', 'bone', 'bone_r', 'jet', 'Spectral_r'), clamp=True, show_histo=True, show_icon=True, draggable=False, at=0, **kwargs)</code>","text":"<p>Generate a rendering window with slicing planes for the input Volume.</p> <p>Parameters:</p> Name Type Description Default <code>cmaps</code> <p>(list) list of color maps names to cycle when clicking button</p> <code>('gist_ncar_r', 'hot_r', 'bone', 'bone_r', 'jet', 'Spectral_r')</code> <code>clamp</code> <p>(bool) clamp scalar range to reduce the effect of tails in color mapping</p> <code>True</code> <code>use_slider3d</code> <p>(bool) show sliders attached along the axes</p> required <code>show_histo</code> <p>(bool) show histogram on bottom left</p> <code>True</code> <code>show_icon</code> <p>(bool) show a small 3D rendering icon of the volume</p> <code>True</code> <code>draggable</code> <p>(bool) make the 3D icon draggable</p> <code>False</code> <code>at</code> <p>(int) subwindow number to plot to</p> <code>0</code> <code>**kwargs</code> <p>(dict) keyword arguments to pass to Plotter.</p> <code>{}</code> <p>Examples:</p> <ul> <li>slicer1.py</li> </ul> <p></p>"},{"location":"3d/#utils3d.vedo_tools.show_matrix_by_vedo","title":"<code>show_matrix_by_vedo(data)</code>","text":"<p>\u7528vedo\u6e32\u67d3\u77e9\u9635</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>\u8f93\u5165\u76842d/3d\u6570\u7ec4\uff1b</p> required"},{"location":"lmdb/","title":"lmdb\u96c6\u6210\u5e93","text":""},{"location":"lmdb/#1","title":"1. \u7b80\u4ecb","text":"<ul> <li>\u5c06lmdb\u4e0emsgpack\u7ed3\u5408\uff0c\u65b9\u4fbf\u5c06numpy\u7c7b\u578b\u5b57\u5178\u52a0\u5165lmdb\u5b58\u50a8\uff1b</li> <li>\u8fdb\u884c\u4e8c\u6b21\u5c01\u88c5\uff0c\u63d0\u4f9b\u66f4\u52a0\u9ad8\u7ea7\u63a5\u53e3\uff0c\u65b9\u4fbf\u4f7f\u7528\u3002</li> <li>\u6bcf\u4e2a\u6570\u636e\u5e93\uff0c\u75311\u4e2ameta\u6570\u636e\u5e93\uff08str\u7c7b\u578b\uff09+1\u4e2adata\u6570\u636e\u5e93\uff08numpy\u7c7b\u578b\uff09\u7ec4\u6210</li> </ul>"},{"location":"lmdb/#2","title":"2. \u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"lmdb/#1-pytorch","title":"1. \u7528\u4e8epytorch\u52a0\u8f7d\u5668","text":"<pre><code>\n# pip install sindre\nfrom sindre.lmdb import  Reader\nimport torch\n\n\nclass TorchDataset(torch.utils.data.Dataset):\n    \"\"\"Object for interfacing with `torch.utils.data.Dataset`.\n    Parameter\n    ---------\n    dirpath : string\n        Path to the directory containing the LMDB.\n    \"\"\"\n    def __init__(self, dirpath):\n        self.dirpath = dirpath\n        self.db = Reader(self.dirpath, lock=False)\n\n    def __len__(self):\n        return len(self.db)\n\n    def __getitem__(self, key):\n        data = self.db[key]\n        for k in data.keys():\n            data[k] = torch.from_numpy(data[k])\n\n        return data\n\n    def __repr__(self):\n        return str(self.db)\n\n\n\n</code></pre>"},{"location":"lmdb/#2_1","title":"2. \u521b\u5efa\u6570\u636e","text":"<pre><code>import sindre.lmdb as  lmdb\nimport numpy as np\nX = np.random.random((8, 2, 2, 2, 2))\ny = np.arange(2, dtype=np.uint8)\n\n# \u521b\u5efa\ndb =  lmdb.Writer(dirpath=r'data', map_size_limit=1)\nprint(db)\ndb.put_samples({'input1': X, 'target1': y})\ndb.put_samples({\"jaw\":np.array(\"upper\"),\"name\":np.array(\"\u6570\u636e5aaaaaaaaaaa\")})\ndb.set_meta_str(\"\u7b2c\u4e00\u4e2a\u63cf\u8ff0\u4fe1\u606f\", \"\u8fd9\u662f\u521b\u5efa\")\ndb.close()\n\n</code></pre>"},{"location":"lmdb/#3","title":"3. \u8ffd\u52a0\u5e76\u6269\u5bb9","text":"<pre><code>import sindre.lmdb as  lmdb\nimport numpy as np\ndb = lmdb.Writer(dirpath=r'data', map_size_limit=50)\nprint(db)\nfor i in range(100):\n    db.put_samples({'rangeX': X, 'rangeY':X})\ndb.set_meta_str(\"\u7b2c\u4e8c\u4e2a\u63cf\u8ff0\u4fe1\u606f\", \"\u8ffd\u52a0\")\ndb.close()\n</code></pre>"},{"location":"lmdb/#4","title":"4.  \u4fee\u6539","text":"<pre><code>import sindre.lmdb as  lmdb\nimport numpy as np\n#\u5c06\u7d22\u5f15\u4e3a2\u7684\u4fee\u6539\u4e3a\u65b0\u7684\u5185\u5bb9\ndb = lmdb.Writer(dirpath=r'data', map_size_limit=10)\ndb.change_db_value(2,{'y':y, 'x':y})\ndb.close()\n\n</code></pre>"},{"location":"lmdb/#5-windows","title":"5. \u4fee\u590dwindows\u65e0\u6cd5\u5b9e\u65f6\u53d8\u5316\u5927\u5c0f","text":"<pre><code>import sindre.lmdb as  lmdb\nimport numpy as np\n# \u5c06\u4f1a\u628a\u9884\u5148\u5206\u914d\u7684\u6570\u636e\u5927\u5c0f\u6062\u590d\u5b9e\u9645\u5927\u5c0f\nlmdb.repair_windows_size(dirpath=r'data')\n</code></pre>"},{"location":"lmdb/#6","title":"6. \u8bfb\u53d6","text":"<pre><code>import sindre.lmdb as  lmdb\nimport numpy as np\ndb = lmdb.Reader(dirpath=r'data')\nprint(db)\nprint(db.get_meta_key_info())\nprint(db.get_data_key_info())\nprint(db.get_meta_str(\"\u7b2c\u4e00\u4e2a\u63cf\u8ff0\u4fe1\u606f\"))\nprint(db.get_meta_str(\"\u7b2c\u4e8c\u4e2a\u63cf\u8ff0\u4fe1\u606f\"))\nprint(db[2].keys())\nprint(db[1].keys())\nprint(db[0].keys())\ndb.close()\n\n</code></pre>"},{"location":"lmdb/#7","title":"7. \u5408\u5e76\u6570\u636e\u5e93","text":"<pre><code># \u5408\u5e76\u6570\u636e\u5e93\nfrom sindre  import   lmdb\nimport numpy as np\ndb_A =  lmdb.Writer(dirpath=r'A', map_size_limit=1)\ndb_A.put_samples({'inputA': X, 'targetA': y})\ndb_A.set_meta_str(\"\u7b2c\u4e00\u4e2a\u63cf\u8ff0\u4fe1\u606f\", \"\u8fd9\u662fA\")\ndb_A.close()\n\ndb_B=  lmdb.Writer(dirpath=r'B', map_size_limit=1)\ndb_B.put_samples({'inputB': X, 'targetB': y})\ndb_B.set_meta_str(\"\u7b2c\u4e8c\u4e2a\u63cf\u8ff0\u4fe1\u606f\", \"\u8fd9\u662fB\")\ndb_B.close()\n# \u5f00\u59cb\u5408\u5e76\nlmdb.merge_db(merge_dirpath=r'C', A_dirpath=\"A\", B_dirpath=\"B\",map_size_limit=2)\n\n# \u5bf9\u5408\u5e76\u6570\u636e\u5e93\u8fdb\u884c\u8bfb\u53d6\nwith lmdb.Reader(dirpath=r'C') as l:\n    print(l.get_meta_key_info())\n</code></pre>"},{"location":"lmdb/#3-api","title":"3. API\u6587\u6863","text":""},{"location":"lmdb/#lmdb.pylmdb.Reader","title":"<code>Reader</code>","text":"<p>               Bases: <code>object</code></p> <p>\u7528\u4e8e\u8bfb\u53d6\u5305\u542b\u5f20\u91cf(<code>numpy.ndarray</code>)\u6570\u636e\u96c6\u7684\u5bf9\u8c61\u3002 \u8fd9\u4e9b\u5f20\u91cf\u662f\u901a\u8fc7\u4f7f\u7528MessagePack\u4eceLightning Memory-Mapped Database (LMDB)\u4e2d\u8bfb\u53d6\u7684\u3002</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>\u4f7f\u7528<code>get_sample()</code>\u4ece<code>data_db</code>\u8fd4\u56de\u6837\u672c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>int/slice\u7c7b\u578b\u7684\u503c</p> required <p>Returns:</p> Type Description <code>list</code> <p>\u5bf9\u5e94\u7d22\u5f15\u5bf9\u8c61</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.__init__","title":"<code>__init__(dirpath, multiprocessing=False)</code>","text":"<p>\u521d\u59cb\u5316</p> <p>Parameters:</p> Name Type Description Default <code>dirpath</code> <p>\u5305\u542bLMDB\u7684\u76ee\u5f55\u8def\u5f84\u3002</p> required <code>multiprocessing</code> <p>\u662f\u5426\u5f00\u542f\u591a\u8fdb\u7a0b\u8bfb\u53d6\u3002</p> <code>False</code>"},{"location":"lmdb/#lmdb.pylmdb.Reader.__len__","title":"<code>__len__()</code>","text":"<p>Returns:</p> Type Description <code>int</code> <p>\u8fd4\u56de\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u91cf\u3002</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.close","title":"<code>close()</code>","text":"<p>Returns:</p> Type Description <p>\u5173\u95ed\u73af\u5883\u3002\u4f7f\u6253\u5f00\u7684\u4efb\u4f55\u8fed\u4ee3\u5668\u3001\u6e38\u6807\u548c\u4e8b\u52a1\u65e0\u6548\u3002</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.get_data_key_info","title":"<code>get_data_key_info()</code>","text":"<p>Returns:</p> Type Description <code>set</code> <p>\u83b7\u53d6\u5143\u6570\u636e\u5e93\u6240\u6709\u952e</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.get_data_keys","title":"<code>get_data_keys(i=0)</code>","text":"<p>\u8fd4\u56de\u7b2ci\u4e2a\u6837\u672c\u5728<code>data_db</code>\u4e2d\u7684\u6240\u6709\u952e\u7684\u5217\u8868\u3002 \u5982\u679c\u6240\u6709\u6837\u672c\u5305\u542b\u76f8\u540c\u7684\u952e,\u5219\u53ea\u9700\u8981\u68c0\u67e5\u7b2c\u4e00\u4e2a\u6837\u672c,\u56e0\u6b64\u9ed8\u8ba4\u503c\u4e3a<code>i=0</code></p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>\u7d22\u5f15</p> <code>0</code> <p>Returns:</p> Type Description <code>list</code> <p>list\u7c7b\u578b\u5bf9\u8c61</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.get_data_specification","title":"<code>get_data_specification(i)</code>","text":"<p>\u8fd4\u56de\u7b2ci\u4e2a\u6837\u672c\u7684\u6240\u6709\u6570\u636e\u5bf9\u8c61\u7684\u89c4\u8303\u3002 \u89c4\u8303\u5305\u62ec\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u5047\u8bbe\u6bcf\u4e2a\u6570\u636e\u5bf9\u8c61\u90fd\u662f<code>numpy.ndarray</code>\u3002</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>\u7d22\u5f15</p> required <p>Returns:</p> Type Description <code>dict</code> <p>\u6570\u636e\u5b57\u5178</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.get_data_value","title":"<code>get_data_value(i, key)</code>","text":"<p>\u8fd4\u56de\u7b2ci\u4e2a\u6837\u672c\u5bf9\u5e94\u4e8e\u8f93\u5165\u952e\u7684\u503c\u3002</p> <p>\u8be5\u503c\u4ece<code>data_db</code>\u4e2d\u68c0\u7d22\u3002</p> <p>\u56e0\u4e3a\u6bcf\u4e2a\u6837\u672c\u90fd\u5b58\u50a8\u5728\u4e00\u4e2amsgpack\u4e2d,\u6240\u4ee5\u5728\u8fd4\u56de\u503c\u4e4b\u524d,\u6211\u4eec\u9700\u8981\u5148\u8bfb\u53d6\u6574\u4e2amsgpack\u3002</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>\u7d22\u5f15</p> required <code>key</code> <code>str</code> <p>\u8be5\u7d22\u5f15\u7684\u952e</p> required <p>Returns:</p> Type Description <p>\u5bf9\u5e94\u7684\u503c</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.get_meta_key_info","title":"<code>get_meta_key_info()</code>","text":"<p>Returns:</p> Type Description <code>set</code> <p>\u83b7\u53d6\u5143\u6570\u636e\u5e93\u6240\u6709\u952e</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.get_meta_str","title":"<code>get_meta_str(key)</code>","text":"<p>\u5c06\u8f93\u5165\u952e\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5b57\u7b26\u4e32\u8fd4\u56de\u3002 \u8be5\u503c\u4ece<code>meta_db</code>\u4e2d\u68c0\u7d22\u3002 Args:     key: \u5b57\u7b26\u4e32\u6216\u5b57\u8282\u5b57\u7b26\u4e32</p> <p>Returns:</p> Type Description <code>str</code> <p>str,\u8f93\u5165\u952e\u5bf9\u5e94\u7684\u503c</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.get_sample","title":"<code>get_sample(i)</code>","text":"<p>\u4ece<code>data_db</code>\u8fd4\u56de\u7b2ci\u4e2a\u6837\u672c\u3002 Args:     i:  \u7d22\u5f15</p> <p>Returns:</p> Type Description <code>dict</code> <p>\u5b57\u5178\u7c7b\u578b\u5bf9\u8c61</p>"},{"location":"lmdb/#lmdb.pylmdb.Reader.get_samples","title":"<code>get_samples(i, size)</code>","text":"<p>\u8fd4\u56de\u4ece<code>i</code>\u5230<code>i + size</code>\u7684\u6240\u6709\u8fde\u7eed\u6837\u672c\u3002</p> Notes <p>\u5047\u8bbe:    * \u4ece<code>i</code>\u5230<code>i + size</code>\u7684\u6bcf\u4e2a\u6837\u672c\u5177\u6709\u76f8\u540c\u7684\u952e\u96c6\u3002    * \u6837\u672c\u4e2d\u7684\u6240\u6709\u6570\u636e\u5bf9\u8c61\u90fd\u662f<code>numpy.ndarray</code>\u7c7b\u578b\u3002    * \u4e0e\u540c\u4e00\u4e2a\u952e\u5173\u8054\u7684\u503c\u5177\u6709\u76f8\u540c\u7684\u5f20\u91cf\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u3002</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>int, \u5f00\u59cb\u7d22\u5f15</p> required <code>size</code> <code>int</code> <p>int, \u7d22\u5f15\u957f\u5ea6</p> required <p>Returns:</p> Type Description <code>list</code> <p>\u6240\u6709\u6837\u672c\u7ec4\u6210\u7684list</p>"},{"location":"lmdb/#lmdb.pylmdb.Writer","title":"<code>Writer</code>","text":"<p>               Bases: <code>object</code></p> <p>\u7528\u4e8e\u5c06\u6570\u636e\u96c6\u7684\u5bf9\u8c61 ('numpy.ndarray') \u5199\u5165\u95ea\u7535\u5185\u5b58\u6620\u5c04\u6570\u636e\u5e93 (LMDB),\u5e76\u5e26\u6709MessagePack\u538b\u7f29\u3002 Note:</p> <pre><code>db =  sindre.lmdb.Writer(dirpath=r'datasets/lmdb', map_size_limit=1024*100,ram_gb_limit=3.0)\ndb.set_meta_str(\"\u63cf\u8ff0\u4fe1\u606f\", \"xxxx\")\n\ndata = {xx:np.array(xxx)} # \u5c3d\u91cf\u5360\u7528ram_gb_limit\u5185\u5b58\n\ngb_required = db.check_sample_size(data) # \u8ba1\u7b97\u6570\u636e\u5360\u7528\u5185\u5b58(GB)\n\ndb.put_samples(data) # \u4e00\u6b21\u6027\u5199\u5165,\u6ce8\u610fgb_required&lt;ram_gb_limit\u9650\u5236\n\n\ndb.close()\n</code></pre>"},{"location":"lmdb/#lmdb.pylmdb.Writer.__init__","title":"<code>__init__(dirpath, map_size_limit, multiprocessing=False)</code>","text":"<p>\u521d\u59cb\u5316</p> <p>Parameters:</p> Name Type Description Default <code>dirpath</code> <code>str</code> <p>\u5e94\u8be5\u5199\u5165LMDB\u7684\u76ee\u5f55\u7684\u8def\u5f84\u3002</p> required <code>map_size_limit</code> <code>int</code> <p>LMDB\u7684map\u5927\u5c0f,\u5355\u4f4d\u4e3aMB\u3002\u5fc5\u987b\u8db3\u591f\u5927\u4ee5\u6355\u83b7\u6253\u7b97\u5b58\u50a8\u5728LMDB\u4e2d\u6240\u6709\u6570\u636e\u3002</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u5f00\u542f\u591a\u8fdb\u7a0b\u3002</p> <code>False</code>"},{"location":"lmdb/#lmdb.pylmdb.Writer.change_db_value","title":"<code>change_db_value(key, value, safe_model=True)</code>","text":"<p>\u4fee\u6539\u952e\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>int</code> <p>\u952e</p> required <code>value</code> <code>dict</code> <p>\u5185\u5bb9</p> required <code>safe_model</code> <code>bool</code> <p>\u5b89\u5168\u6a21\u5f0f,\u5982\u679c\u5f00\u542f,\u5219\u4fee\u6539\u4f1a\u63d0\u793a;</p> <code>True</code>"},{"location":"lmdb/#lmdb.pylmdb.Writer.change_value","title":"<code>change_value(num_id, samples)</code>","text":"<p>\u901a\u8fc7\u6307\u5b9a\u7d22\u5f15,\u4fee\u6539\u5185\u5bb9 Args:     num_id: \u7d22\u5f15     samples: \u5185\u5bb9</p> <p>Returns:</p>"},{"location":"lmdb/#lmdb.pylmdb.Writer.check_db_stats","title":"<code>check_db_stats()</code>","text":"<p>\u68c0\u67e5lmdb\u662f\u7ee7\u7eed\u5199,\u8fd8\u662f\u65b0\u5199</p>"},{"location":"lmdb/#lmdb.pylmdb.Writer.check_sample_size","title":"<code>check_sample_size(samples)</code>","text":"<p>\u68c0\u6d4bsample\u5b57\u5178\u7684\u5927\u5c0f</p> <p>Parameters:</p> Name Type Description Default <code>samples</code> <code>_type_</code> <p>\u5b57\u5178\u7c7b\u578b\u6570\u636e</p> required Return <p>gb_required : \u5b57\u5178\u5927\u5c0f(GB)</p>"},{"location":"lmdb/#lmdb.pylmdb.Writer.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed\u73af\u5883\u3002 \u5728\u5173\u95ed\u4e4b\u524d,\u5c06\u6837\u672c\u6570\u5199\u5165<code>meta_db</code>,\u4f7f\u6240\u6709\u6253\u5f00\u7684\u8fed\u4ee3\u5668\u3001\u6e38\u6807\u548c\u4e8b\u52a1\u65e0\u6548\u3002</p>"},{"location":"lmdb/#lmdb.pylmdb.Writer.put_samples","title":"<code>put_samples(samples)</code>","text":"<p>\u5c06\u4f20\u5165\u5185\u5bb9\u7684\u952e\u548c\u503c\u653e\u5165<code>data_db</code> LMDB\u4e2d\u3002</p> Notes <p>\u51fd\u6570\u5047\u8bbe\u6240\u6709\u503c\u7684\u7b2c\u4e00\u4e2a\u8f74\u8868\u793a\u6837\u672c\u6570\u3002\u56e0\u6b64,\u5355\u4e2a\u6837\u672c\u5fc5\u987b\u5728<code>numpy.newaxis</code>\u4e4b\u524d\u3002</p> <p>\u4f5c\u4e3aPython\u5b57\u5178:</p> <pre><code>put_samples({'key1': value1, 'key2': value2, ...})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>samples</code> <code>dict</code> <p>\u7531\u5b57\u7b26\u4e32\u548cnumpy\u6570\u7ec4\u7ec4\u6210</p> required"},{"location":"lmdb/#lmdb.pylmdb.Writer.set_meta_str","title":"<code>set_meta_str(key, string)</code>","text":"<p>\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5199\u5165<code>meta_db</code>\u4e2d\u7684\u8f93\u5165\u952e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>string or bytestring</p> required <code>string</code> <code>str</code> <p>string</p> required"},{"location":"lmdb/#lmdb.pylmdb.merge_lmdb","title":"<code>merge_lmdb(target_dir, source_dirs, map_size_limit, multiprocessing=False)</code>","text":"<p>\u5c06\u591a\u4e2a\u6e90LMDB\u6570\u636e\u5e93\u5408\u5e76\u5230\u76ee\u6807\u6570\u636e\u5e93</p> <p>Parameters:</p> Name Type Description Default <code>target_dir</code> <code>str</code> <p>\u76ee\u6807LMDB\u8def\u5f84</p> required <code>source_dirs</code> <code>list</code> <p>\u6e90LMDB\u8def\u5f84\u5217\u8868</p> required <code>map_size_limit</code> <code>int</code> <p>\u76ee\u6807LMDB\u7684map\u5927\u5c0f\u9650\u5236\uff08MB\uff09</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u6a21\u5f0f</p> <code>False</code> Example <pre><code># \u5408\u5e76\u793a\u4f8b\nmerge_lmdb(\n    target_dir=\"merged.db\",\n    source_dirs=[\"db1\", \"db2\"],\n    map_size_limit=1024  # 1GB\n)\n</code></pre>"},{"location":"lmdb/#lmdb.pylmdb.parallel_write","title":"<code>parallel_write(output_dir, file_list, process, map_size_limit, num_processes, multiprocessing=False, temp_root='./tmp', cleanup_temp=True)</code>","text":"<p>\u591a\u8fdb\u7a0b\u5904\u7406JSON\u6587\u4ef6\u5e76\u5199\u5165LMDB</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>str</code> <p>\u6700\u7ec8\u8f93\u51faLMDB\u8def\u5f84</p> required <code>file_list</code> <code>list</code> <p>\u6587\u4ef6\u8def\u5f84\u5217\u8868</p> required <code>process</code> <code>callable</code> <p>\u6570\u636e\u5904\u7406\u51fd\u6570</p> required <code>map_size_limit</code> <code>int</code> <p>\u603bLMDB\u7684map\u5927\u5c0f\u9650\u5236(MB)</p> required <code>num_processes</code> <code>int</code> <p>\u8fdb\u7a0b\u6570\u91cf</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u6a21\u5f0f</p> <code>False</code> <code>temp_root</code> <code>str</code> <p>\u4e34\u65f6\u76ee\u5f55\u6839\u8def\u5f84\uff08\u9ed8\u8ba4./tmp\uff0c\u5c3d\u91cf\u5199\u5728SSD,\u65b9\u4fbf\u5feb\u901f\u8f6c\u6362</p> <code>'./tmp'</code> <code>cleanup_temp</code> <code>bool</code> <p>\u662f\u5426\u6e05\u7406\u4e34\u65f6\u76ee\u5f55\uff08\u9ed8\u8ba4True\uff09</p> <code>True</code> Example <pre><code>\ndef process(json_file):\n    with open(json_file,\"r\") as f:\n        data = json.loads(f.read())\n    id=data[\"id_patient\"]\n    jaw = data[\"jaw\"]\n    labels = data[\"labels\"]\n\n    mesh = vedo.load( json_file.replace(\".json\",\".obj\"))\n    vertices = mesh.vertices\n    faces = mesh.cells\n\n\n    out = {\n        'mesh_faces':faces,\n        'mesh_vertices':vertices,\n        'vertex_labels':labels,\n        \"jaw\":jaw,\n\n    }\n    return out\n\n\n\nif __name__ == '__main__':\n    json_file_list = glob.glob(\"./*/*/*.json\")\n    print(len(json_file_list))\n\n    sindre.lmdb.parallel_write(\n        output_dir=dirpath,\n        file_list=json_file_list[:16],\n        process=process,\n        map_size_limit=map_size_limit,\n        num_processes=8,\n        temp_root=\"./processing_temp\", \n        cleanup_temp=False  \n    )\n\n\n</code></pre>"},{"location":"lmdb/#lmdb.pylmdb.repair_windows_size","title":"<code>repair_windows_size(dirpath)</code>","text":"<p>\u89e3\u51b3windows\u6ca1\u6cd5\u5b9e\u65f6\u53d8\u5316\u5927\u5c0f\u95ee\u9898;</p> <p>Parameters:</p> Name Type Description Default <code>dirpath</code> <code>str</code> <p>lmdb\u76ee\u5f55\u8def\u5f84</p> required <p>Returns:</p>"},{"location":"lmdb/#lmdb.pylmdb.split_lmdb","title":"<code>split_lmdb(source_dir, target_dirs, map_size_limit, multiprocessing=False)</code>","text":"<p>\u5c06\u6e90LMDB\u6570\u636e\u5e93\u5747\u5300\u62c6\u5206\u5230\u591a\u4e2a\u76ee\u6807\u6570\u636e\u5e93</p> <p>Parameters:</p> Name Type Description Default <code>source_dir</code> <code>str</code> <p>\u6e90LMDB\u8def\u5f84</p> required <code>target_dirs</code> <code>list</code> <p>\u76ee\u6807LMDB\u8def\u5f84\u5217\u8868</p> required <code>map_size_limit</code> <code>int</code> <p>\u6bcf\u4e2a\u76ee\u6807LMDB\u7684map\u5927\u5c0f\u9650\u5236\uff08MB\uff09</p> required <code>multiprocessing</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u591a\u8fdb\u7a0b\u6a21\u5f0f</p> <code>False</code> Example <pre><code>split_lmdb(\nsource_dir=\"large.db\",\ntarget_dirs=[f\"split_{i}.db\" for i in range(4)],\nmap_size_limit=256\n)\n</code></pre>"},{"location":"report/","title":"\u7b80\u4ecb","text":"<ol> <li>\u5feb\u901f\u5c06dict\u5185\u5bb9\u8f6c\u6210\u62a5\u544a\uff0c\u4ece\u800c\u89e3\u51b3\u5199\u5165Excel\u5199\u5165\u56f0\u96be\uff0c\u5c55\u793a\u56f0\u96be\u95ee\u9898\uff1b</li> </ol>"},{"location":"report/#_2","title":"\u7528\u6cd5","text":"<p>\u6bcf\u6b21\u5199\u5165\u5fc5\u987b\u6309\u7167\u56fa\u5b9a\u952e\u503c\u5bf9\u3002</p> <pre><code>\n\n\nfrom PIL import Image\nfrom sindre.report import Report\n\ndata1 = {\n    \"className\": \"\u6d4b\u8bd51\",\n    \"methodName\": \"\u8c03\u7528xxx\",\n    \"description\": \"\\n            test 1==1\\n        :return:\\n        \",\n    \"spendTime\": 1.0,\n    \"status\": \"\u6210\u529f\",\n    \"log\": [\n\n        \"\u8fd9\u662f\u6587\u672c\"\n    ]\n}\n\ndata2 = {\n    \"className\": \"\u6d4b\u8bd52\",\n    \"methodName\": \"test_is_none\",\n    \"description\": \"\\n            test None object\\n        :return:\\n        \",\n    \"spendTime\": 100.0,\n    \"status\": \"\u5931\u8d25\",\n    \"log\": [\n        \"&lt;img src='./AI.png'&gt;\",\n        \"\"\n    ]\n}\n\ndata3 = {\n    \"className\": \"\u6d4b\u8bd52\",\n    \"methodName\": \"test_is_none\",\n    \"description\": \"\\n            test None object\\n        :return:\\n        \",\n    \"spendTime\": 100.0,\n    \"status\": \"\u8df3\u8fc7\",\n    \"log\": []\n}\n\nif __name__ == '__main__':\n    t = Report()\n    # \u66f4\u6539\u7528\u4f8b\u540d\u79f0\n    t.data[\"testName\"] = \"\u8fd9\u662f\u4efd\u793a\u4f8b\u62a5\u544a\"\n    # \u4ecePIL\u52a0\u8f7d\u56fe\u7247\u5230\u7f51\u9875\n    image = Image.open('./AI.png')\n    print(image)\n    b64_str = t.PIL_To_B64(image)\n    data3[\"log\"].append(b64_str)\n    data3[\"log\"].append(\"\u8fd9\u662f\u6587\u672c\u52a0\u56fe\u7247\")\n    data3[\"log\"].append(\"&lt;a href='./AI.png' download&gt;\u4e0b\u8f7d\u8d44\u6e90\u6587\u4ef6&lt;/a&gt;\")\n    # \u6dfb\u52a0\u5230\u7f51\u9875\u4e2d\n    t.append_row(data1)\n    t.append_row(data2)\n    t.append_row(data3)\n    # \u5199\u5165\u5230\u6307\u5b9a\u4f4d\u7f6e\n    t.write(path=\"./\")\n\n\n</code></pre>"},{"location":"report/#_3","title":"\u7ed3\u679c","text":""},{"location":"win_tools/","title":"win\u5de5\u5177\u5e93","text":""},{"location":"win_tools/#1","title":"1. \u7b80\u4ecb","text":"<ol> <li>\u96c6\u6210\u4e00\u4e9b\u9488\u5bf9windows\u7cfb\u7edf\u7684\u5de5\u5177\u53ca\u5e94\u7528</li> </ol>"},{"location":"win_tools/#2","title":"2. \u5185\u5bb9","text":""},{"location":"win_tools/#windows","title":"windows\u7a97\u53e3\u8bbe\u7f6e\u4e3a\u900f\u660e","text":"<ul> <li> <p>\u539f\u7406</p> <ul> <li>\u901a\u8fc7win api \u67e5\u627e\u7a97\u53e3\uff0c\u5f3a\u5236\u4fee\u6539\u7a97\u53e3\u900f\u660e\u5ea6</li> </ul> </li> <li> <p>\u7528\u6cd5</p> </li> </ul> <pre><code>from sindre.win_tools import taskbar\n# \u8bbe\u7f6e\u4efb\u52a1\u680f\uff0c\u900f\u660e\u5ea6\u4e3a255\uff0c\ntaskbar.set_windows_alpha(255,\"Shell_TrayWnd\")\n</code></pre>"},{"location":"win_tools/#pypyd","title":"\u5c06\u76ee\u5f55\u4e0b\u6240\u6709py\u6587\u4ef6\u7f16\u8bd1\u4e3apyd","text":"<pre><code>from sindre.win_tools import tools\ntools.py2pyd(r\"C:\\Users\\sindre\\Downloads\\55555\",clear_py=False)\n</code></pre>"},{"location":"win_tools/#pythonpip","title":"\u5728python\u4e2d\u8c03\u7528pip\u5b89\u88c5\u5305","text":"<pre><code>from sindre.win_tools import tools\n# \u5982\u5b89\u88c5\u5230\u6307\u5b9a\u76ee\u5f55\u4e0b\uff0c\u9700\u8981\u8c03\u7528\uff0c\u8c03\u7528\u65f6sys.path.insert(0, target_dir)\ntools.pip_install(package_name=\"numpy==1.24.1\",target_dir=\"./target\")\ntools.pip_install(requirements_path=\"./requirements.txt\",target_dir=\"./target\")\ntools.pip_install(package_name=\"numpy==1.24.1\")\n</code></pre>"},{"location":"win_tools/#exe-python-xxpy","title":"\u7528exe\u8fd0\u884c  python xx.py","text":"<ol> <li>\u521b\u5efa\u4e2aapp.c\u6587\u4ef6</li> </ol> <pre><code>#include &lt;windows.h&gt;\n\nint main() {\n    // \u83b7\u53d6\u5f53\u524d\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\n    char exePath[MAX_PATH];\n    GetModuleFileNameA(NULL, exePath, MAX_PATH);\n\n    // \u53bb\u9664\u6587\u4ef6\u540d\u90e8\u5206\uff0c\u53ea\u4fdd\u7559\u76ee\u5f55\u8def\u5f84\n    char drive[_MAX_DRIVE];\n    char dir[MAX_PATH];\n    _splitpath_s(exePath, drive, sizeof(drive), dir, sizeof(dir), NULL, 0, NULL, 0);\n\n    // \u7ec4\u5408\u76ee\u5f55\u8def\u5f84\n    char dirPath[MAX_PATH];\n    sprintf_s(dirPath, sizeof(dirPath), \"%s%s\", drive, dir);\n\n    // \u6784\u5efaapp.py\u7684\u7edd\u5bf9\u8def\u5f84\n    char appPath[MAX_PATH];\n    sprintf_s(appPath, sizeof(appPath), \"%sapp.py\", dirPath);\n\n    // \u6784\u5efapython\u7684\u7edd\u5bf9\u8def\u5f84\n    char pythonPath[MAX_PATH];\n    sprintf_s(pythonPath, sizeof(pythonPath), \"%spy/python.exe\", dirPath);\n\n    // \u6784\u5efa\u542f\u52a8\u547d\u4ee4\n    char command[MAX_PATH * 2];\n    sprintf_s(command, sizeof(command), \"\\\"%s\\\" \\\"%s\\\"\", pythonPath, appPath);\n\n    // \u521b\u5efa\u8fdb\u7a0b\u5e76\u6267\u884c\u547d\u4ee4\n    STARTUPINFOA si = { sizeof(si) };\n    PROCESS_INFORMATION pi;\n\n    if (CreateProcessA(NULL, command, NULL, NULL, FALSE, 0, NULL, NULL, &amp;si, &amp;pi)) {\n        // \u7b49\u5f85\u8fdb\u7a0b\u7ed3\u675f\n        WaitForSingleObject(pi.hProcess, INFINITE);\n\n        // \u5173\u95ed\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u53e5\u67c4\n        CloseHandle(pi.hProcess);\n        CloseHandle(pi.hThread);\n    }\n\n    return 0;\n}\n\n</code></pre> <ol> <li>\u521b\u5efa\u56fe\u7247\uff0c\u65b0\u5efalogo.rc\u6587\u4ef6</li> </ol> <pre><code>IDI_ICON1  ICON  DISCARDABLE  F:/My_Github/ToolKit/py2nsis/py2nsis/config/logo.ico'\n\n</code></pre> <ol> <li>\u521b\u5efaapp_setup.py\u811a\u672c\uff0c\u7528\u4e8e\u7f16\u8bd1app.c</li> </ol> <pre><code>from distutils.ccompiler import new_compiler\nimport distutils.sysconfig\nimport sys\nimport os\nfrom pathlib import Path\n\ndef compile(src):\n    src = Path(src)\n    cc = new_compiler()\n    exe = src.stem\n    cc.add_include_dir(distutils.sysconfig.get_python_inc())\n    cc.add_library_dir(os.path.join(sys.base_exec_prefix, 'libs'))\n    # First the CLI executable\n    objs = cc.compile([str(src),\"logo.rc\"])\n    cc.link_executable(objs, exe)\n    # Now the GUI executable\n    # cc.define_macro('WINDOWS')\n    # objs = cc.compile([str(src)])\n    # cc.link_executable(objs, exe + 'w', extra_preargs=['/ICON:{self.icon}']) \n</code></pre> <ol> <li>\u8fd0\u884c \"python.exe   app_setup.py\" \u5373\u53ef\u751f\u6210app.exe, </li> <li>\u53cc\u51fb\u5373\u53ef\u4ee3\u66ff\u8fd0\u884c \"py/python.exe   app.py\"</li> </ol>"},{"location":"win_tools/#python","title":"\u81ea\u52a8\u5b89\u88c5python","text":"<pre><code>\nfrom sindre.win_tools import tools\ntools.python_installer(install_dir=r\"C:\\Users\\sindre\\Downloads\\55555\",version='3.9.6')\n</code></pre>"},{"location":"win_tools/#nsis","title":"\u8fdb\u884cnsis\u5c01\u88c5","text":"<pre><code>\nfrom sindre.win_tools import tools\ntools.exe2nsis(work_dir=r\"C:/55555\",\n         files_to_compress=[f\"C:/55555/{i}\" for i in  [\"app\", \"app.exe\", \"app.py\"]],\n         exe_name=\"app.exe\")\n</code></pre> <p>\u5c06\u751f\u6210</p>"},{"location":"win_tools/#win32","title":"win32\u63d0\u793a\u6846","text":"<ul> <li>\u9488\u5bf9\u4e0d\u60f3\u5b89\u88c5\u5176\u4ed6gui\u5305\uff0c\u4f46\u9700\u8981\u5f39\u7a97\u63d0\u793a\u7684\u73b0\u8c61</li> </ul> <pre><code>\nimport win32api,win32con\n\n\n##\u63d0\u9192OK\u6d88\u606f\u6846\nwin32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u63d0\u9192OK\u6d88\u606f\u6846\", \"\u63d0\u9192\",win32con.MB_OK)\n\n##\u662f\u5426\u4fe1\u606f\u6846\nwin32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u662f\u5426\u4fe1\u606f\u6846\", \"\u63d0\u9192\",win32con.MB_YESNO)\n\n##\u8bf4\u660e\u4fe1\u606f\u6846\nwin32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u8bf4\u660e\u4fe1\u606f\u6846\", \"\u63d0\u9192\",win32con.MB_HELP)\n\n####\u8b66\u544a\u4fe1\u606f\u6846\nwin32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u8b66\u544a\u4fe1\u606f\u6846\", \"\u63d0\u9192\",win32con.MB_ICONWARNING)\n\n##\u7591\u95ee\u4fe1\u606f\u6846\nwin32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u7591\u95ee\u4fe1\u606f\u6846\", \"\u63d0\u9192\",win32con.MB_ICONQUESTION)\n\n##\u63d0\u793a\u4fe1\u606f\u6846\nwin32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u63d0\u793a\u4fe1\u606f\u6846\", \"\u63d0\u9192\",win32con.MB_ICONASTERISK)\n\n##\u786e\u8ba4\u4fe1\u606f\u6846\nwin32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u786e\u8ba4\u4fe1\u606f\u6846\", \"\u63d0\u9192\",win32con.MB_OKCANCEL)\n\n##\u91cd\u8bd5\u4fe1\u606f\u6846\nwin32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u91cd\u8bd5\u4fe1\u606f\u6846\", \"\u63d0\u9192\",win32con.MB_RETRYCANCEL)\n\n##\u662f\u5426\u53d6\u6d88\u4fe1\u606f\u6846\nwin32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u662f\u5426\u53d6\u6d88\u4fe1\u606f\u6846\", \"\u63d0\u9192\",win32con.MB_YESNOCANCEL)\n\n\n# \u5f39\u51fa\u5e26\u6709\u4e09\u4e2a\u6309\u94ae\u7684\u6d88\u606f\u6846  \nresult = win32api.MessageBox(0, \"\u8fd9\u662f\u4e00\u4e2a\u5e26\u6709\u4e09\u4e2a\u6309\u94ae\u7684\u6d4b\u8bd5\u6d88\u606f\u6846\", \"\u6807\u9898\", win32con.MB_YESNOCANCEL)\n\n# \u68c0\u6d4b\u7528\u6237\u70b9\u51fb\u7684\u6309\u94ae  \nif result == win32con.IDYES:\n    print(\"\u7528\u6237\u70b9\u51fb\u4e86 Yes \u6309\u94ae\")\nelif result == win32con.IDNO:\n    print(\"\u7528\u6237\u70b9\u51fb\u4e86 No \u6309\u94ae\")\nelif result == win32con.IDCANCEL:\n    print(\"\u7528\u6237\u70b9\u51fb\u4e86 Cancel \u6309\u94ae\")\n</code></pre> <pre><code>WIN32CON.MB_OK = 0\nWIN32CON.MB_OKCANCEL = 1\nWIN32CON.MB_ABORTRETRYIGNORE = 2\nWIN32CON.MB_YESNOCANCEL = 3\nWIN32CON.MB_YESNO = 4\nWIN32CON.MB_RETRYCANCEL = 5\nWIN32CON.MB_ICONHAND = 16\nWIN32CON.MB_ICONQUESTION = 32\nWIN32CON.MB_ICONEXCLAMATION = 48\nWIN32CON.MB_ICONASTERISK = 64\nWIN32CON.MB_ICONWARNING = WIN32CON.MB_ICONEXCLAMATION\nWIN32CON.MB_ICONERROR = WIN32CON.MB_ICONHAND\nWIN32CON.MB_ICONINFORMATION = WIN32CON.MB_ICONASTERISK\nWIN32CON.MB_ICONSTOP = WIN32CON.MB_ICONHAND\nWIN32CON.MB_DEFBUTTON1 = 0\nWIN32CON.MB_DEFBUTTON2 = 256\nWIN32CON.MB_DEFBUTTON3 = 512\nWIN32CON.MB_DEFBUTTON4 = 768\nWIN32CON.MB_APPLMODAL = 0\nWIN32CON.MB_SYSTEMMODAL = 4096\nWIN32CON.MB_TASKMODAL = 8192\nWIN32CON.MB_HELP = 16384\nWIN32CON.MB_NOFOCUS = 32768\nWIN32CON.MB_SETFOREGROUND = 65536\nWIN32CON.MB_DEFAULT_DESKTOP_ONLY = 131072\nWIN32CON.MB_TOPMOST = 262144\nWIN32CON.MB_RIGHT = 524288\nWIN32CON.MB_RTLREADING = 1048576\nWIN32CON.MB_SERVICE_NOTIFICATION = 2097152\nWIN32CON.MB_TYPEMASK = 15\nWIN32CON.MB_USERICON = 128\nWIN32CON.MB_ICONMASK = 240\nWIN32CON.MB_DEFMASK = 3840\nWIN32CON.MB_MODEMASK = 12288\nWIN32CON.MB_MISCMASK = 49152\n\n</code></pre>"},{"location":"win_tools/#_1","title":"\u5feb\u901f\u521b\u5efa\u6258\u76d8","text":"<pre><code>\nfrom sindre.win_tools import stray\nimport time\ndef setup_fun(icon):\n    icon.visible = True\n\n    i = 0\n    while icon.visible:\n        # Some payload code\n        print(i)\n        i += 1\n        time.sleep(5)\ndef fun0():\n    print(\"fun0\")\n\n\ndef fun1():\n    print(\"fun1\")\n\n\ndef fun2():\n    print(\"fun2\")\n\n\ndef fun3():\n    print(\"fun3\")\n\n\nif __name__ == '__main__':\n    data = [\n        # \u4e0d\u901a\u77e5\u6267\u884c\n        {\"\u6309\u94ae1\": [\"\", fun1]},\n        # \u901a\u77e5\u6267\u884c\n        {\"\u6309\u94ae0\": [\"\u6267\u884cfun0\", fun0]},\n        # \u4e8c\u7ea7\u5d4c\u5957\n        {\"\u5b50\u83dc\u5355\": [\n            {\"\u6309\u94ae2\": [\"\", fun2]},\n            {\"\u6309\u94ae3\": [\"\u6267\u884cfun3\", fun3]}\n        ]\n        }\n    ]\n    s = stray(data)\n    # \u81ea\u5b9a\u4e49\u51fd\u6570\u542f\u52a8\n    # s(setup_fun)\n    s()\n\n</code></pre>"},{"location":"win_tools/#3-api","title":"3. API:","text":"<pre><code>@path   \uff1asindre_package -&gt; py2pyd.py\n@IDE    \uff1aPyCharm\n@Author \uff1asindre\n@Email  \uff1ayx@mviai.com\n@Date   \uff1a2024/6/17 16:32\n@Version: V0.1\n@License: (C)Copyright 2021-2023 , UP3D\n@Reference: \n</code></pre>"},{"location":"win_tools/#win_tools.tools.ip_bind","title":"<code>ip_bind</code>","text":"<p>               Bases: <code>Thread</code></p> <p>\u5b9e\u73b0\u672c\u57300.0.0.0\uff1a8000 &lt;--&gt; \u8fdc\u7a0b\u7aef\u53e3 \u5185\u7f51\u7a7f\u900f</p>"},{"location":"win_tools/#win_tools.tools.ip_bind.set_ip","title":"<code>set_ip(remote_ip, remote_port)</code>","text":"<pre><code>\u8bbe\u7f6e\u8fdc\u7a0bip\u53ca\u7aef\u53e3\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>remote_ip</code> <code>str</code> <p>\u8fdc\u7a0bip</p> required <code>remote_port</code> <code>str</code> <p>\u8fdc\u7a0b\u7aef\u53e3</p> required <p>Returns:</p>"},{"location":"win_tools/#win_tools.tools.tcp_mapping_qt","title":"<code>tcp_mapping_qt</code>","text":"<p>               Bases: <code>Thread</code></p> <p>TCP \u4f20\u8f93\u7ebf\u7a0b</p>"},{"location":"win_tools/#win_tools.tools.check_port","title":"<code>check_port(port)</code>","text":"<pre><code>\u68c0\u6d4bwin\u7aef\u53e3\u662f\u5426\u88ab\u5360\u7528\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>\u7aef\u53e3\u53f7</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u88ab\u5360\u7528</p>"},{"location":"win_tools/#win_tools.tools.download_url_file","title":"<code>download_url_file(url, package_path='test.zip')</code>","text":"<pre><code>\u4e0b\u8f7d\u7f51\u7edc\u6587\u4ef6\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>\u6587\u4ef6\u4e0b\u8f7d\u5730\u5740</p> required <code>package_path</code> <code>str</code> <p>\u4fdd\u5b58\u8def\u5f84</p> <code>'test.zip'</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u4e0b\u8f7d\u662f\u5426\u6210\u529f</p>"},{"location":"win_tools/#win_tools.tools.exe2nsis","title":"<code>exe2nsis(work_dir, files_to_compress, exe_name, appname='AI', version='1.0.0.0', author='SindreYang', license='', icon_old='')</code>","text":"<pre><code>\u5c06exe\u8fdb\u884cnsis\u5c01\u88c5\u6210\u5b89\u88c5\u7a0b\u5e8f\uff1b\n</code></pre> Notes <p>files_to_compress =[f\"{self.work_dir}/{i}\" for i in  [\"app\", \"py\", \"third\", \"app.exe\", \"app.py\", \"requirements.txt\"]]</p> <p>Parameters:</p> Name Type Description Default <code>work_dir</code> <code>str</code> <p>\u751f\u6210\u7684\u8def\u5f84</p> required <code>files_to_compress</code> <code>list</code> <p>\u9700\u8981\u8f6c\u6362\u7684\u6587\u4ef6\u5939/\u6587\u4ef6\u5217\u8868</p> required <code>exe_name</code> <code>str</code> <p>\u6307\u5b9a\u4e3b\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5feb\u6377\u65b9\u5f0f\u4e5f\u662f\u7528\u6b64\u7a0b\u5e8f\u751f\u6210</p> required <code>appname</code> <code>str</code> <p>\u4ea7\u54c1\u540d</p> <code>'AI'</code> <code>version</code> <code>str</code> <p>\u7248\u672c\u53f7--\u5fc5\u987b\u4e3a X.X.X.X</p> <code>'1.0.0.0'</code> <code>author</code> <code>str</code> <p>\u4f5c\u8005</p> <code>'SindreYang'</code> <code>license</code> <code>str</code> <p>licence.txt\u534f\u8bae\u8def\u5f84</p> <code>''</code> <code>icon_old</code> <code>str</code> <p>\u56fe\u6807</p> <code>''</code>"},{"location":"win_tools/#win_tools.tools.is_service_exists","title":"<code>is_service_exists(service_name)</code>","text":"<pre><code>\u4f7f\u7528sc query\u547d\u4ee4\u6765\u67e5\u8be2\u670d\u52a1\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>\u670d\u52a1\u540d</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u8fd4\u56de\u662f\u5426\u5b58\u5728\u670d\u52a1</p>"},{"location":"win_tools/#win_tools.tools.kill_process_using_port","title":"<code>kill_process_using_port(server_port)</code>","text":"<pre><code>\u8bf7\u6c42\u7ba1\u7406\u5458\u6743\u9650\uff0c\u5e76\u5f3a\u5236\u91ca\u653e\u7aef\u53e3\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>server_port</code> <code>int</code> <p>\u7aef\u53e3\u53f7</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u7aef\u53e3\u662f\u5426\u6210\u529f\u91ca\u653e</p>"},{"location":"win_tools/#win_tools.tools.pip_install","title":"<code>pip_install(package_name='', target_dir='', requirements_path='')</code>","text":"<pre><code>\u6a21\u62dfpip\u5b89\u88c5\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>package_name</code> <code>str</code> <p>\u5305\u540d</p> <code>''</code> <code>target_dir</code> <code>str</code> <p>\u5b89\u88c5\u76ee\u5f55\uff0c\u4e3a\u7a7a\uff0c\u5219\u81ea\u52a8\u5b89\u88c5\u5230\u5f53\u524d\u73af\u5883\u4e0b</p> <code>''</code> <code>requirements_path</code> <code>str</code> <p>requirementsTxT\u8def\u5f84</p> <code>''</code>"},{"location":"win_tools/#win_tools.tools.py2pyd","title":"<code>py2pyd(source_path, clear_py=False)</code>","text":"<pre><code>\u5c06\u76ee\u5f55\u4e0b\u6240\u6709py\u6587\u4ef6\u7f16\u8bd1\u6210pyd\u6587\u4ef6\u3002\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source_path</code> <code>str</code> <p>\u6e90\u7801\u76ee\u5f55</p> required <code>clear_py</code> <code>bool</code> <p>\u662f\u5426\u7f16\u8bd1\u540e\u6e05\u9664py\u6587\u4ef6,\u6ce8\u610f\u5907\u4efd\u3002</p> <code>False</code>"},{"location":"win_tools/#win_tools.tools.python_installer","title":"<code>python_installer(install_dir, version='3.9.6')</code>","text":"<pre><code>python\u81ea\u52a8\u5316\u5b89\u88c5\n</code></pre> Notes <p>\u9ed8\u8ba4\u4ece https://mirrors.huaweicloud.com/python/{version}/python-{version}-embed-amd64.zip \u4e0b\u8f7d\u5b89\u88c5</p> <p>Parameters:</p> Name Type Description Default <code>install_dir</code> <code>str</code> <p>\u5b89\u88c5\u4f4d\u7f6e</p> required <code>version</code> <code>str</code> <p>\u7248\u672c\u53f7</p> <code>'3.9.6'</code>"},{"location":"win_tools/#win_tools.tools.zip_extract","title":"<code>zip_extract(zip_path, install_dir)</code>","text":"<pre><code> \u5c06zip\u6587\u4ef6\u89e3\u538b\n</code></pre> <p>Args:     zip_path: zip\u6587\u4ef6\u8def\u5f84     install_dir: \u89e3\u538b\u76ee\u5f55</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u89e3\u538b\u662f\u5426\u6210\u529f</p>"},{"location":"win_tools/#win_tools.taskbar.set_windows_alpha","title":"<code>set_windows_alpha(alpha=255, class_name='Shell_TrayWnd')</code>","text":"<p>\u901a\u8fc7\u67e5\u627eclass_name,\u5f3a\u5236\u7528\u4e8e\u8bbe\u7f6e\u4efb\u52a1\u680f\u900f\u660e\u7a0b\u5ea6</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>int</code> <p>\u900f\u660e\u5ea6\uff0c(0--\u5b8c\u5168\u900f\u660e\uff0c255--\u5b8c\u5168\u4e0d\u900f\u660e\uff09</p> <code>255</code> <code>class_name</code> <code>str</code> <p>\u7a97\u53e3\u540d</p> <code>'Shell_TrayWnd'</code>"}]}